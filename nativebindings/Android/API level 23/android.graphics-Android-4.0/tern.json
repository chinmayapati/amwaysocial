{
  "android": {
    "graphics": {
      "ComposeShader": {
        "!url": "http://developer.android.com/reference/android/graphics/ComposeShader.html",
        "!type": "fn(shaderA: +android.graphics.Shader, shaderB: +android.graphics.Shader, mode: +android.graphics.Xfermode)",
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "getLocalMatrix": {
            "!type": "fn(localM: +android.graphics.Matrix) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Shader.html#getLocalMatrix(android.graphics.Matrix)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "setLocalMatrix": {
            "!type": "fn(localM: +android.graphics.Matrix) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Shader.html#setLocalMatrix(android.graphics.Matrix)"
          }
        }
      },
      "BitmapFactory": {
        "!url": "http://developer.android.com/reference/android/graphics/BitmapFactory.html",
        "!type": "fn()",
        "Options": {
          "!url": "http://developer.android.com/reference/android/graphics/BitmapFactory.Options.html",
          "!type": "fn()",
          "prototype": {
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "equals": {
              "!type": "fn(o: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
            },
            "requestCancelDecode": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#requestCancelDecode()"
            }
          }
        },
        "decodeResource": {
          "!type": "fn(res: +android.content.res.Resources, id: number, opts: +android.graphics.BitmapFactory.Options) -> +android.graphics.Bitmap",
          "!url": "http://developer.android.com/reference/android/graphics/BitmapFactory.html#decodeResource(android.content.res.Resources, int, android.graphics.BitmapFactory.Options)"
        },
        "decodeFileDescriptor": {
          "!type": "fn(fd: +java.io.FileDescriptor, outPadding: +android.graphics.Rect, opts: +android.graphics.BitmapFactory.Options) -> +android.graphics.Bitmap",
          "!url": "http://developer.android.com/reference/android/graphics/BitmapFactory.html#decodeFileDescriptor(java.io.FileDescriptor, android.graphics.Rect, android.graphics.BitmapFactory.Options)"
        },
        "decodeResourceStream": {
          "!type": "fn(res: +android.content.res.Resources, value: +android.util.TypedValue, is: +java.io.InputStream, pad: +android.graphics.Rect, opts: +android.graphics.BitmapFactory.Options) -> +android.graphics.Bitmap",
          "!url": "http://developer.android.com/reference/android/graphics/BitmapFactory.html#decodeResourceStream(android.content.res.Resources, android.util.TypedValue, java.io.InputStream, android.graphics.Rect, android.graphics.BitmapFactory.Options)"
        },
        "decodeFile": {
          "!type": "fn(pathName: string, opts: +android.graphics.BitmapFactory.Options) -> +android.graphics.Bitmap",
          "!url": "http://developer.android.com/reference/android/graphics/BitmapFactory.html#decodeFile(java.lang.String, android.graphics.BitmapFactory.Options)"
        },
        "decodeStream": {
          "!type": "fn(is: +java.io.InputStream, outPadding: +android.graphics.Rect, opts: +android.graphics.BitmapFactory.Options) -> +android.graphics.Bitmap",
          "!url": "http://developer.android.com/reference/android/graphics/BitmapFactory.html#decodeStream(java.io.InputStream, android.graphics.Rect, android.graphics.BitmapFactory.Options)"
        },
        "decodeByteArray": {
          "!type": "fn(data: +java.newArray, offset: number, length: number, opts: +android.graphics.BitmapFactory.Options) -> +android.graphics.Bitmap",
          "!url": "http://developer.android.com/reference/android/graphics/BitmapFactory.html#decodeByteArray(byte[], int, int, android.graphics.BitmapFactory.Options)"
        },
        "prototype": {
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          }
        }
      },
      "Bitmap_Delegate": {
        "!url": "http://developer.android.com/reference/android/graphics/Bitmap_Delegate.html",
        "BitmapCreateFlags": {
          "!url": "http://developer.android.com/reference/android/graphics/Bitmap_Delegate.BitmapCreateFlags.html",
          "PREMULTIPLIED": {
            "!type": "+android.graphics.Bitmap_Delegate.BitmapCreateFlags",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap_Delegate.BitmapCreateFlags.html#PREMULTIPLIED"
          },
          "MUTABLE": {
            "!type": "+android.graphics.Bitmap_Delegate.BitmapCreateFlags",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap_Delegate.BitmapCreateFlags.html#MUTABLE"
          },
          "valueOf": {
            "!type": "fn(name: string) -> +android.graphics.Bitmap_Delegate.BitmapCreateFlags",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap_Delegate.BitmapCreateFlags.html#valueOf(java.lang.String)"
          },
          "values": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap_Delegate.BitmapCreateFlags.html#values()"
          },
          "getSharedConstants": {
            "!type": "fn(enumType: +java.lang.Class) -> +java.newArray",
            "!url": "http://developer.android.com/reference/java/lang/Enum.html#getSharedConstants(java.lang.Class)"
          },
          "prototype": {
            "name": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#name()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#toString()"
            },
            "equals": {
              "!type": "fn(other: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#equals(java.lang.Object)"
            },
            "compareTo": {
              "!type": "fn(o: +java.lang.Enum) -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#compareTo(E)"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "getDeclaringClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#getDeclaringClass()"
            },
            "ordinal": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#ordinal()"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#hashCode()"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            }
          }
        },
        "getDelegate": {
          "!type": "fn(native_bitmap: +java.lang.Long) -> +android.graphics.Bitmap_Delegate",
          "!url": "http://developer.android.com/reference/android/graphics/Bitmap_Delegate.html#getDelegate(long)"
        },
        "createBitmap": {
          "!type": "fn(input: +java.io.File, isMutable: bool, density: Density) -> +android.graphics.Bitmap",
          "!url": "http://developer.android.com/reference/android/graphics/Bitmap_Delegate.html#createBitmap(java.io.File, boolean, Density)"
        },
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "hasAlpha": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap_Delegate.html#hasAlpha()"
          },
          "change": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap_Delegate.html#change()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getConfig": {
            "!type": "fn() -> +android.graphics.Bitmap.Config",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap_Delegate.html#getConfig()"
          },
          "getImage": {
            "!type": "fn() -> +java.awt.image.BufferedImage",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap_Delegate.html#getImage()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "ThreadBitmapTest": {
        "!url": "http://developer.android.com/reference/android/graphics/ThreadBitmapTest.html",
        "!type": "fn()",
        "prototype": {
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "testCreation": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/ThreadBitmapTest.html#testCreation()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          }
        }
      },
      "LayerRasterizer_Delegate": {
        "!url": "http://developer.android.com/reference/android/graphics/LayerRasterizer_Delegate.html",
        "!type": "fn()",
        "getDelegate": {
          "!type": "fn(nativeShader: +java.lang.Long) -> +android.graphics.Rasterizer_Delegate",
          "!url": "http://developer.android.com/reference/android/graphics/Rasterizer_Delegate.html#getDelegate(long)"
        },
        "prototype": {
          "getSupportMessage": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/graphics/LayerRasterizer_Delegate.html#getSupportMessage()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "isSupported": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/LayerRasterizer_Delegate.html#isSupported()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "PathEffect_Delegate": {
        "!url": "http://developer.android.com/reference/android/graphics/PathEffect_Delegate.html",
        "!type": "fn()",
        "getDelegate": {
          "!type": "fn(nativeShader: +java.lang.Long) -> +android.graphics.PathEffect_Delegate",
          "!url": "http://developer.android.com/reference/android/graphics/PathEffect_Delegate.html#getDelegate(long)"
        },
        "prototype": {
          "getSupportMessage": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/graphics/PathEffect_Delegate.html#getSupportMessage()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "isSupported": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/PathEffect_Delegate.html#isSupported()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "getStroke": {
            "!type": "fn(paint: +android.graphics.Paint_Delegate) -> +java.awt.Stroke",
            "!url": "http://developer.android.com/reference/android/graphics/PathEffect_Delegate.html#getStroke(android.graphics.Paint_Delegate)"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "Insets": {
        "!url": "http://developer.android.com/reference/android/graphics/Insets.html",
        "NONE": {
          "!type": "+android.graphics.Insets",
          "!url": "http://developer.android.com/reference/android/graphics/Insets.html#NONE"
        },
        "of": {
          "!type": "fn(left: number, top: number, right: number, bottom: number) -> +android.graphics.Insets",
          "!url": "http://developer.android.com/reference/android/graphics/Insets.html#of(int, int, int, int)"
        },
        "prototype": {
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Insets.html#hashCode()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Insets.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/graphics/Insets.html#toString()"
          }
        }
      },
      "LinearGradient": {
        "!url": "http://developer.android.com/reference/android/graphics/LinearGradient.html",
        "!type": "fn(x0: +java.lang.Float, y0: +java.lang.Float, x1: +java.lang.Float, y1: +java.lang.Float, colors: +java.newArray, positions: +java.newArray, tile: +android.graphics.Shader.TileMode)",
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "getLocalMatrix": {
            "!type": "fn(localM: +android.graphics.Matrix) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Shader.html#getLocalMatrix(android.graphics.Matrix)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "setLocalMatrix": {
            "!type": "fn(localM: +android.graphics.Matrix) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Shader.html#setLocalMatrix(android.graphics.Matrix)"
          }
        }
      },
      "BlurMaskFilter": {
        "!url": "http://developer.android.com/reference/android/graphics/BlurMaskFilter.html",
        "!type": "fn(radius: +java.lang.Float, style: +android.graphics.BlurMaskFilter.Blur)",
        "Blur": {
          "!url": "http://developer.android.com/reference/android/graphics/BlurMaskFilter.Blur.html",
          "SOLID": {
            "!type": "+android.graphics.BlurMaskFilter.Blur",
            "!url": "http://developer.android.com/reference/android/graphics/BlurMaskFilter.Blur.html#SOLID"
          },
          "INNER": {
            "!type": "+android.graphics.BlurMaskFilter.Blur",
            "!url": "http://developer.android.com/reference/android/graphics/BlurMaskFilter.Blur.html#INNER"
          },
          "OUTER": {
            "!type": "+android.graphics.BlurMaskFilter.Blur",
            "!url": "http://developer.android.com/reference/android/graphics/BlurMaskFilter.Blur.html#OUTER"
          },
          "NORMAL": {
            "!type": "+android.graphics.BlurMaskFilter.Blur",
            "!url": "http://developer.android.com/reference/android/graphics/BlurMaskFilter.Blur.html#NORMAL"
          },
          "valueOf": {
            "!type": "fn(name: string) -> +android.graphics.BlurMaskFilter.Blur",
            "!url": "http://developer.android.com/reference/android/graphics/BlurMaskFilter.Blur.html#valueOf(java.lang.String)"
          },
          "values": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/graphics/BlurMaskFilter.Blur.html#values()"
          },
          "getSharedConstants": {
            "!type": "fn(enumType: +java.lang.Class) -> +java.newArray",
            "!url": "http://developer.android.com/reference/java/lang/Enum.html#getSharedConstants(java.lang.Class)"
          },
          "prototype": {
            "name": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#name()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#toString()"
            },
            "equals": {
              "!type": "fn(other: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#equals(java.lang.Object)"
            },
            "compareTo": {
              "!type": "fn(o: +java.lang.Enum) -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#compareTo(E)"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "getDeclaringClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#getDeclaringClass()"
            },
            "ordinal": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#ordinal()"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#hashCode()"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            }
          }
        },
        "prototype": {
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          }
        }
      },
      "Atlas": {
        "!url": "http://developer.android.com/reference/android/graphics/Atlas.html",
        "!type": "fn(type: +android.graphics.Atlas.Type, width: number, height: number)",
        "Type": {
          "!url": "http://developer.android.com/reference/android/graphics/Atlas.Type.html",
          "SliceShortAxis": {
            "!type": "+android.graphics.Atlas.Type",
            "!url": "http://developer.android.com/reference/android/graphics/Atlas.Type.html#SliceShortAxis"
          },
          "SliceLongAxis": {
            "!type": "+android.graphics.Atlas.Type",
            "!url": "http://developer.android.com/reference/android/graphics/Atlas.Type.html#SliceLongAxis"
          },
          "SliceMinArea": {
            "!type": "+android.graphics.Atlas.Type",
            "!url": "http://developer.android.com/reference/android/graphics/Atlas.Type.html#SliceMinArea"
          },
          "SliceMaxArea": {
            "!type": "+android.graphics.Atlas.Type",
            "!url": "http://developer.android.com/reference/android/graphics/Atlas.Type.html#SliceMaxArea"
          },
          "valueOf": {
            "!type": "fn(name: string) -> +android.graphics.Atlas.Type",
            "!url": "http://developer.android.com/reference/android/graphics/Atlas.Type.html#valueOf(java.lang.String)"
          },
          "values": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/graphics/Atlas.Type.html#values()"
          },
          "getSharedConstants": {
            "!type": "fn(enumType: +java.lang.Class) -> +java.newArray",
            "!url": "http://developer.android.com/reference/java/lang/Enum.html#getSharedConstants(java.lang.Class)"
          },
          "prototype": {
            "name": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#name()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#toString()"
            },
            "equals": {
              "!type": "fn(other: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#equals(java.lang.Object)"
            },
            "compareTo": {
              "!type": "fn(o: +java.lang.Enum) -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#compareTo(E)"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "getDeclaringClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#getDeclaringClass()"
            },
            "ordinal": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#ordinal()"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#hashCode()"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            }
          }
        },
        "Entry": {
          "!url": "http://developer.android.com/reference/android/graphics/Atlas.Entry.html",
          "!type": "fn()",
          "prototype": {
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "equals": {
              "!type": "fn(o: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
            }
          }
        },
        "FLAG_ADD_PADDING": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Atlas.html#FLAG_ADD_PADDING"
        },
        "FLAG_DEFAULTS": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Atlas.html#FLAG_DEFAULTS"
        },
        "prototype": {
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "pack": {
            "!type": "fn(width: number, height: number) -> +android.graphics.Atlas.Entry",
            "!url": "http://developer.android.com/reference/android/graphics/Atlas.html#pack(int, int)"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          }
        }
      },
      "Region_Delegate": {
        "!url": "http://developer.android.com/reference/android/graphics/Region_Delegate.html",
        "!type": "fn()",
        "getDelegate": {
          "!type": "fn(nativeShader: +java.lang.Long) -> +android.graphics.Region_Delegate",
          "!url": "http://developer.android.com/reference/android/graphics/Region_Delegate.html#getDelegate(long)"
        },
        "combineShapes": {
          "!type": "fn(shape1: +java.awt.Shape, shape2: +java.awt.Shape, regionOp: number) -> +java.awt.geom.Area",
          "!url": "http://developer.android.com/reference/android/graphics/Region_Delegate.html#combineShapes(java.awt.Shape, java.awt.Shape, int)"
        },
        "prototype": {
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "getJavaArea": {
            "!type": "fn() -> +java.awt.geom.Area",
            "!url": "http://developer.android.com/reference/android/graphics/Region_Delegate.html#getJavaArea()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          }
        }
      },
      "BitmapShader_Delegate": {
        "!url": "http://developer.android.com/reference/android/graphics/BitmapShader_Delegate.html",
        "getDelegate": {
          "!type": "fn(nativeShader: +java.lang.Long) -> +android.graphics.Shader_Delegate",
          "!url": "http://developer.android.com/reference/android/graphics/Shader_Delegate.html#getDelegate(long)"
        },
        "getTileMode": {
          "!type": "fn(tileMode: number) -> +android.graphics.Shader.TileMode",
          "!url": "http://developer.android.com/reference/android/graphics/Shader_Delegate.html#getTileMode(int)"
        },
        "prototype": {
          "getSupportMessage": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/graphics/BitmapShader_Delegate.html#getSupportMessage()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "isSupported": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/BitmapShader_Delegate.html#isSupported()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "getJavaPaint": {
            "!type": "fn() -> +java.awt.Paint",
            "!url": "http://developer.android.com/reference/android/graphics/BitmapShader_Delegate.html#getJavaPaint()"
          }
        }
      },
      "Canvas": {
        "!url": "http://developer.android.com/reference/android/graphics/Canvas.html",
        "!type": "fn()",
        "EdgeType": {
          "!url": "http://developer.android.com/reference/android/graphics/Canvas.EdgeType.html",
          "BW": {
            "!type": "+android.graphics.Canvas.EdgeType",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.EdgeType.html#BW"
          },
          "AA": {
            "!type": "+android.graphics.Canvas.EdgeType",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.EdgeType.html#AA"
          },
          "valueOf": {
            "!type": "fn(name: string) -> +android.graphics.Canvas.EdgeType",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.EdgeType.html#valueOf(java.lang.String)"
          },
          "values": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.EdgeType.html#values()"
          },
          "getSharedConstants": {
            "!type": "fn(enumType: +java.lang.Class) -> +java.newArray",
            "!url": "http://developer.android.com/reference/java/lang/Enum.html#getSharedConstants(java.lang.Class)"
          },
          "prototype": {
            "name": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#name()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#toString()"
            },
            "equals": {
              "!type": "fn(other: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#equals(java.lang.Object)"
            },
            "compareTo": {
              "!type": "fn(o: +java.lang.Enum) -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#compareTo(E)"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "getDeclaringClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#getDeclaringClass()"
            },
            "ordinal": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#ordinal()"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#hashCode()"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            }
          }
        },
        "VertexMode": {
          "!url": "http://developer.android.com/reference/android/graphics/Canvas.VertexMode.html",
          "TRIANGLE_STRIP": {
            "!type": "+android.graphics.Canvas.VertexMode",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.VertexMode.html#TRIANGLE_STRIP"
          },
          "TRIANGLE_FAN": {
            "!type": "+android.graphics.Canvas.VertexMode",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.VertexMode.html#TRIANGLE_FAN"
          },
          "TRIANGLES": {
            "!type": "+android.graphics.Canvas.VertexMode",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.VertexMode.html#TRIANGLES"
          },
          "valueOf": {
            "!type": "fn(name: string) -> +android.graphics.Canvas.VertexMode",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.VertexMode.html#valueOf(java.lang.String)"
          },
          "values": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.VertexMode.html#values()"
          },
          "getSharedConstants": {
            "!type": "fn(enumType: +java.lang.Class) -> +java.newArray",
            "!url": "http://developer.android.com/reference/java/lang/Enum.html#getSharedConstants(java.lang.Class)"
          },
          "prototype": {
            "name": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#name()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#toString()"
            },
            "equals": {
              "!type": "fn(other: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#equals(java.lang.Object)"
            },
            "compareTo": {
              "!type": "fn(o: +java.lang.Enum) -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#compareTo(E)"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "getDeclaringClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#getDeclaringClass()"
            },
            "ordinal": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#ordinal()"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#hashCode()"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            }
          }
        },
        "CLIP_SAVE_FLAG": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#CLIP_SAVE_FLAG"
        },
        "ALL_SAVE_FLAG": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#ALL_SAVE_FLAG"
        },
        "CLIP_TO_LAYER_SAVE_FLAG": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#CLIP_TO_LAYER_SAVE_FLAG"
        },
        "FULL_COLOR_LAYER_SAVE_FLAG": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#FULL_COLOR_LAYER_SAVE_FLAG"
        },
        "HAS_ALPHA_LAYER_SAVE_FLAG": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#HAS_ALPHA_LAYER_SAVE_FLAG"
        },
        "MATRIX_SAVE_FLAG": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#MATRIX_SAVE_FLAG"
        },
        "sCompatibilityRestore": {
          "!type": "bool",
          "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#sCompatibilityRestore"
        },
        "freeTextLayoutCaches": {
          "!type": "fn() -> void",
          "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#freeTextLayoutCaches()"
        },
        "freeCaches": {
          "!type": "fn() -> void",
          "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#freeCaches()"
        },
        "prototype": {
          "drawText": {
            "!type": "fn(text: +java.newArray, index: number, count: number, x: +java.lang.Float, y: +java.lang.Float, paint: +android.graphics.Paint) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#drawText(char[], int, int, float, float, android.graphics.Paint)"
          },
          "drawRGB": {
            "!type": "fn(r: number, g: number, b: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#drawRGB(int, int, int)"
          },
          "drawVertices": {
            "!type": "fn(mode: +android.graphics.Canvas.VertexMode, vertexCount: number, verts: +java.newArray, vertOffset: number, texs: +java.newArray, texOffset: number, colors: +java.newArray, colorOffset: number, indices: +java.newArray, indexOffset: number, indexCount: number, paint: +android.graphics.Paint) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#drawVertices(android.graphics.Canvas.VertexMode, int, float[], int, float[], int, int[], int, short[], int, int, android.graphics.Paint)"
          },
          "drawRect": {
            "!type": "fn(rect: +android.graphics.RectF, paint: +android.graphics.Paint) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#drawRect(android.graphics.RectF, android.graphics.Paint)"
          },
          "translate": {
            "!type": "fn(dx: +java.lang.Float, dy: +java.lang.Float) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#translate(float, float)"
          },
          "drawCircle": {
            "!type": "fn(cx: +java.lang.Float, cy: +java.lang.Float, radius: +java.lang.Float, paint: +android.graphics.Paint) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#drawCircle(float, float, float, android.graphics.Paint)"
          },
          "drawPicture": {
            "!type": "fn(picture: +android.graphics.Picture) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#drawPicture(android.graphics.Picture)"
          },
          "isOpaque": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#isOpaque()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "setDensity": {
            "!type": "fn(density: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#setDensity(int)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "restoreToCount": {
            "!type": "fn(saveCount: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#restoreToCount(int)"
          },
          "getMatrix": {
            "!type": "fn(ctm: +android.graphics.Matrix) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#getMatrix(android.graphics.Matrix)"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "clipPath": {
            "!type": "fn(path: +android.graphics.Path, op: +android.graphics.Region.Op) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#clipPath(android.graphics.Path, android.graphics.Region.Op)"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "drawTextRun": {
            "!type": "fn(text: +java.newArray, index: number, count: number, contextIndex: number, contextCount: number, x: +java.lang.Float, y: +java.lang.Float, isRtl: bool, paint: +android.graphics.Paint) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#drawTextRun(char[], int, int, int, int, float, float, boolean, android.graphics.Paint)"
          },
          "drawPath": {
            "!type": "fn(path: +android.graphics.Path, paint: +android.graphics.Paint) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#drawPath(android.graphics.Path, android.graphics.Paint)"
          },
          "setMatrix": {
            "!type": "fn(matrix: +android.graphics.Matrix) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#setMatrix(android.graphics.Matrix)"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "drawPatch": {
            "!type": "fn(patch: +android.graphics.NinePatch, dst: +android.graphics.Rect, paint: +android.graphics.Paint) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#drawPatch(android.graphics.NinePatch, android.graphics.Rect, android.graphics.Paint)"
          },
          "isRecordingFor": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#isRecordingFor(java.lang.Object)"
          },
          "drawRoundRect": {
            "!type": "fn(rect: +android.graphics.RectF, rx: +java.lang.Float, ry: +java.lang.Float, paint: +android.graphics.Paint) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#drawRoundRect(android.graphics.RectF, float, float, android.graphics.Paint)"
          },
          "quickReject": {
            "!type": "fn(rect: +android.graphics.RectF, type: +android.graphics.Canvas.EdgeType) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#quickReject(android.graphics.RectF, android.graphics.Canvas.EdgeType)"
          },
          "drawPosText": {
            "!type": "fn(text: +java.newArray, index: number, count: number, pos: +java.newArray, paint: +android.graphics.Paint) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#drawPosText(char[], int, int, float[], android.graphics.Paint)"
          },
          "save": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#save()"
          },
          "setDrawFilter": {
            "!type": "fn(filter: +android.graphics.DrawFilter) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#setDrawFilter(android.graphics.DrawFilter)"
          },
          "drawPoints": {
            "!type": "fn(pts: +java.newArray, offset: number, count: number, paint: +android.graphics.Paint) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#drawPoints(float[], int, int, android.graphics.Paint)"
          },
          "restore": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#restore()"
          },
          "insertInorderBarrier": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#insertInorderBarrier()"
          },
          "isHardwareAccelerated": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#isHardwareAccelerated()"
          },
          "clipRegion": {
            "!type": "fn(region: +android.graphics.Region, op: +android.graphics.Region.Op) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#clipRegion(android.graphics.Region, android.graphics.Region.Op)"
          },
          "setHighContrastText": {
            "!type": "fn(highContrastText: bool) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#setHighContrastText(boolean)"
          },
          "getNativeCanvasWrapper": {
            "!type": "fn() -> +java.lang.Long",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#getNativeCanvasWrapper()"
          },
          "release": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#release()"
          },
          "drawColor": {
            "!type": "fn(color: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#drawColor(int)"
          },
          "getMaximumBitmapHeight": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#getMaximumBitmapHeight()"
          },
          "concat": {
            "!type": "fn(matrix: +android.graphics.Matrix) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#concat(android.graphics.Matrix)"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "drawTextOnPath": {
            "!type": "fn(text: +java.newArray, index: number, count: number, path: +android.graphics.Path, hOffset: +java.lang.Float, vOffset: +java.lang.Float, paint: +android.graphics.Paint) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#drawTextOnPath(char[], int, int, android.graphics.Path, float, float, android.graphics.Paint)"
          },
          "drawBitmapMesh": {
            "!type": "fn(bitmap: +android.graphics.Bitmap, meshWidth: number, meshHeight: number, verts: +java.newArray, vertOffset: number, colors: +java.newArray, colorOffset: number, paint: +android.graphics.Paint) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#drawBitmapMesh(android.graphics.Bitmap, int, int, float[], int, int[], int, android.graphics.Paint)"
          },
          "drawOval": {
            "!type": "fn(oval: +android.graphics.RectF, paint: +android.graphics.Paint) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#drawOval(android.graphics.RectF, android.graphics.Paint)"
          },
          "drawLines": {
            "!type": "fn(pts: +java.newArray, offset: number, count: number, paint: +android.graphics.Paint) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#drawLines(float[], int, int, android.graphics.Paint)"
          },
          "drawPoint": {
            "!type": "fn(x: +java.lang.Float, y: +java.lang.Float, paint: +android.graphics.Paint) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#drawPoint(float, float, android.graphics.Paint)"
          },
          "drawArc": {
            "!type": "fn(oval: +android.graphics.RectF, startAngle: +java.lang.Float, sweepAngle: +java.lang.Float, useCenter: bool, paint: +android.graphics.Paint) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#drawArc(android.graphics.RectF, float, float, boolean, android.graphics.Paint)"
          },
          "skew": {
            "!type": "fn(sx: +java.lang.Float, sy: +java.lang.Float) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#skew(float, float)"
          },
          "getHeight": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#getHeight()"
          },
          "getDensity": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#getDensity()"
          },
          "scale": {
            "!type": "fn(sx: +java.lang.Float, sy: +java.lang.Float) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#scale(float, float)"
          },
          "getSaveCount": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#getSaveCount()"
          },
          "drawLine": {
            "!type": "fn(startX: +java.lang.Float, startY: +java.lang.Float, stopX: +java.lang.Float, stopY: +java.lang.Float, paint: +android.graphics.Paint) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#drawLine(float, float, float, float, android.graphics.Paint)"
          },
          "insertReorderBarrier": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#insertReorderBarrier()"
          },
          "setBitmap": {
            "!type": "fn(bitmap: +android.graphics.Bitmap) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#setBitmap(android.graphics.Bitmap)"
          },
          "drawBitmap": {
            "!type": "fn(bitmap: +android.graphics.Bitmap, left: +java.lang.Float, top: +java.lang.Float, paint: +android.graphics.Paint) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#drawBitmap(android.graphics.Bitmap, float, float, android.graphics.Paint)"
          },
          "getMaximumBitmapWidth": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#getMaximumBitmapWidth()"
          },
          "getClipBounds": {
            "!type": "fn(bounds: +android.graphics.Rect) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#getClipBounds(android.graphics.Rect)"
          },
          "drawPaint": {
            "!type": "fn(paint: +android.graphics.Paint) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#drawPaint(android.graphics.Paint)"
          },
          "saveLayerAlpha": {
            "!type": "fn(bounds: +android.graphics.RectF, alpha: number, saveFlags: number) -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#saveLayerAlpha(android.graphics.RectF, int, int)"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "setViewport": {
            "!type": "fn(width: number, height: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#setViewport(int, int)"
          },
          "saveLayer": {
            "!type": "fn(bounds: +android.graphics.RectF, paint: +android.graphics.Paint, saveFlags: number) -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#saveLayer(android.graphics.RectF, android.graphics.Paint, int)"
          },
          "setScreenDensity": {
            "!type": "fn(density: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#setScreenDensity(int)"
          },
          "drawARGB": {
            "!type": "fn(a: number, r: number, g: number, b: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#drawARGB(int, int, int, int)"
          },
          "rotate": {
            "!type": "fn(degrees: +java.lang.Float) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#rotate(float)"
          },
          "getWidth": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#getWidth()"
          },
          "getDrawFilter": {
            "!type": "fn() -> +android.graphics.DrawFilter",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#getDrawFilter()"
          },
          "clipRect": {
            "!type": "fn(rect: +android.graphics.RectF, op: +android.graphics.Region.Op) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas.html#clipRect(android.graphics.RectF, android.graphics.Region.Op)"
          }
        }
      },
      "Point": {
        "!url": "http://developer.android.com/reference/android/graphics/Point.html",
        "!type": "fn()",
        "CREATOR": {
          "!type": "+android.os.Parcelable.Creator",
          "!url": "http://developer.android.com/reference/android/graphics/Point.html#CREATOR"
        },
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/graphics/Point.html#toString()"
          },
          "equals": {
            "!type": "fn(x: number, y: number) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Point.html#equals(int, int)"
          },
          "describeContents": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Point.html#describeContents()"
          },
          "offset": {
            "!type": "fn(dx: number, dy: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Point.html#offset(int, int)"
          },
          "negate": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Point.html#negate()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "writeToParcel": {
            "!type": "fn(out: +android.os.Parcel, flags: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Point.html#writeToParcel(android.os.Parcel, int)"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Point.html#hashCode()"
          },
          "set": {
            "!type": "fn(x: number, y: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Point.html#set(int, int)"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "readFromParcel": {
            "!type": "fn(in: +android.os.Parcel) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Point.html#readFromParcel(android.os.Parcel)"
          }
        }
      },
      "AvoidXfermode": {
        "!url": "http://developer.android.com/reference/android/graphics/AvoidXfermode.html",
        "!type": "fn(opColor: number, tolerance: number, mode: +android.graphics.AvoidXfermode.Mode)",
        "Mode": {
          "!url": "http://developer.android.com/reference/android/graphics/AvoidXfermode.Mode.html",
          "AVOID": {
            "!type": "+android.graphics.AvoidXfermode.Mode",
            "!url": "http://developer.android.com/reference/android/graphics/AvoidXfermode.Mode.html#AVOID"
          },
          "TARGET": {
            "!type": "+android.graphics.AvoidXfermode.Mode",
            "!url": "http://developer.android.com/reference/android/graphics/AvoidXfermode.Mode.html#TARGET"
          },
          "valueOf": {
            "!type": "fn(name: string) -> +android.graphics.AvoidXfermode.Mode",
            "!url": "http://developer.android.com/reference/android/graphics/AvoidXfermode.Mode.html#valueOf(java.lang.String)"
          },
          "values": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/graphics/AvoidXfermode.Mode.html#values()"
          },
          "getSharedConstants": {
            "!type": "fn(enumType: +java.lang.Class) -> +java.newArray",
            "!url": "http://developer.android.com/reference/java/lang/Enum.html#getSharedConstants(java.lang.Class)"
          },
          "prototype": {
            "name": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#name()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#toString()"
            },
            "equals": {
              "!type": "fn(other: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#equals(java.lang.Object)"
            },
            "compareTo": {
              "!type": "fn(o: +java.lang.Enum) -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#compareTo(E)"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "getDeclaringClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#getDeclaringClass()"
            },
            "ordinal": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#ordinal()"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#hashCode()"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            }
          }
        },
        "prototype": {
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          }
        }
      },
      "ColorStateListTest": {
        "!url": "http://developer.android.com/reference/android/graphics/ColorStateListTest.html",
        "!type": "fn()",
        "prototype": {
          "setTestContext": {
            "!type": "fn(context: +android.content.Context) -> void",
            "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#setTestContext(android.content.Context)"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "getTestContext": {
            "!type": "fn() -> +android.content.Context",
            "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#getTestContext()"
          },
          "assertWritingContentUriRequiresPermission": {
            "!type": "fn(uri: +android.net.Uri, permission: string) -> void",
            "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertWritingContentUriRequiresPermission(android.net.Uri, java.lang.String)"
          },
          "testAndroidTestCaseSetupProperly": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#testAndroidTestCaseSetupProperly()"
          },
          "getContext": {
            "!type": "fn() -> +android.content.Context",
            "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#getContext()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "testEmptyState": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/ColorStateListTest.html#testEmptyState()"
          },
          "testStateIsInList": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/ColorStateListTest.html#testStateIsInList()"
          },
          "testGetColorWhenListHasNoDefault": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/ColorStateListTest.html#testGetColorWhenListHasNoDefault()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "assertReadingContentUriRequiresPermission": {
            "!type": "fn(uri: +android.net.Uri, permission: string) -> void",
            "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertReadingContentUriRequiresPermission(android.net.Uri, java.lang.String)"
          },
          "assertActivityRequiresPermission": {
            "!type": "fn(packageName: string, className: string, permission: string) -> void",
            "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertActivityRequiresPermission(java.lang.String, java.lang.String, java.lang.String)"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "setContext": {
            "!type": "fn(context: +android.content.Context) -> void",
            "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#setContext(android.content.Context)"
          },
          "testGetColor": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/ColorStateListTest.html#testGetColor()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          }
        }
      },
      "TableMaskFilter": {
        "!url": "http://developer.android.com/reference/android/graphics/TableMaskFilter.html",
        "!type": "fn(table: +java.newArray)",
        "CreateClipTable": {
          "!type": "fn(min: number, max: number) -> +android.graphics.TableMaskFilter",
          "!url": "http://developer.android.com/reference/android/graphics/TableMaskFilter.html#CreateClipTable(int, int)"
        },
        "CreateGammaTable": {
          "!type": "fn(gamma: +java.lang.Float) -> +android.graphics.TableMaskFilter",
          "!url": "http://developer.android.com/reference/android/graphics/TableMaskFilter.html#CreateGammaTable(float)"
        },
        "prototype": {
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          }
        }
      },
      "PorterDuffColorFilter": {
        "!url": "http://developer.android.com/reference/android/graphics/PorterDuffColorFilter.html",
        "!type": "fn(color: number, mode: +android.graphics.PorterDuff.Mode)",
        "prototype": {
          "setMode": {
            "!type": "fn(mode: +android.graphics.PorterDuff.Mode) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/PorterDuffColorFilter.html#setMode(android.graphics.PorterDuff.Mode)"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(object: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/PorterDuffColorFilter.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "getMode": {
            "!type": "fn() -> +android.graphics.PorterDuff.Mode",
            "!url": "http://developer.android.com/reference/android/graphics/PorterDuffColorFilter.html#getMode()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/PorterDuffColorFilter.html#hashCode()"
          },
          "setColor": {
            "!type": "fn(color: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/PorterDuffColorFilter.html#setColor(int)"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "getColor": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/PorterDuffColorFilter.html#getColor()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "PorterDuff": {
        "!url": "http://developer.android.com/reference/android/graphics/PorterDuff.html",
        "!type": "fn()",
        "Mode": {
          "!url": "http://developer.android.com/reference/android/graphics/PorterDuff.Mode.html",
          "DST": {
            "!type": "+android.graphics.PorterDuff.Mode",
            "!url": "http://developer.android.com/reference/android/graphics/PorterDuff.Mode.html#DST"
          },
          "MULTIPLY": {
            "!type": "+android.graphics.PorterDuff.Mode",
            "!url": "http://developer.android.com/reference/android/graphics/PorterDuff.Mode.html#MULTIPLY"
          },
          "SRC_ATOP": {
            "!type": "+android.graphics.PorterDuff.Mode",
            "!url": "http://developer.android.com/reference/android/graphics/PorterDuff.Mode.html#SRC_ATOP"
          },
          "DST_IN": {
            "!type": "+android.graphics.PorterDuff.Mode",
            "!url": "http://developer.android.com/reference/android/graphics/PorterDuff.Mode.html#DST_IN"
          },
          "LIGHTEN": {
            "!type": "+android.graphics.PorterDuff.Mode",
            "!url": "http://developer.android.com/reference/android/graphics/PorterDuff.Mode.html#LIGHTEN"
          },
          "CLEAR": {
            "!type": "+android.graphics.PorterDuff.Mode",
            "!url": "http://developer.android.com/reference/android/graphics/PorterDuff.Mode.html#CLEAR"
          },
          "DST_ATOP": {
            "!type": "+android.graphics.PorterDuff.Mode",
            "!url": "http://developer.android.com/reference/android/graphics/PorterDuff.Mode.html#DST_ATOP"
          },
          "DARKEN": {
            "!type": "+android.graphics.PorterDuff.Mode",
            "!url": "http://developer.android.com/reference/android/graphics/PorterDuff.Mode.html#DARKEN"
          },
          "SRC_IN": {
            "!type": "+android.graphics.PorterDuff.Mode",
            "!url": "http://developer.android.com/reference/android/graphics/PorterDuff.Mode.html#SRC_IN"
          },
          "SRC": {
            "!type": "+android.graphics.PorterDuff.Mode",
            "!url": "http://developer.android.com/reference/android/graphics/PorterDuff.Mode.html#SRC"
          },
          "OVERLAY": {
            "!type": "+android.graphics.PorterDuff.Mode",
            "!url": "http://developer.android.com/reference/android/graphics/PorterDuff.Mode.html#OVERLAY"
          },
          "DST_OUT": {
            "!type": "+android.graphics.PorterDuff.Mode",
            "!url": "http://developer.android.com/reference/android/graphics/PorterDuff.Mode.html#DST_OUT"
          },
          "SCREEN": {
            "!type": "+android.graphics.PorterDuff.Mode",
            "!url": "http://developer.android.com/reference/android/graphics/PorterDuff.Mode.html#SCREEN"
          },
          "ADD": {
            "!type": "+android.graphics.PorterDuff.Mode",
            "!url": "http://developer.android.com/reference/android/graphics/PorterDuff.Mode.html#ADD"
          },
          "XOR": {
            "!type": "+android.graphics.PorterDuff.Mode",
            "!url": "http://developer.android.com/reference/android/graphics/PorterDuff.Mode.html#XOR"
          },
          "SRC_OVER": {
            "!type": "+android.graphics.PorterDuff.Mode",
            "!url": "http://developer.android.com/reference/android/graphics/PorterDuff.Mode.html#SRC_OVER"
          },
          "SRC_OUT": {
            "!type": "+android.graphics.PorterDuff.Mode",
            "!url": "http://developer.android.com/reference/android/graphics/PorterDuff.Mode.html#SRC_OUT"
          },
          "DST_OVER": {
            "!type": "+android.graphics.PorterDuff.Mode",
            "!url": "http://developer.android.com/reference/android/graphics/PorterDuff.Mode.html#DST_OVER"
          },
          "valueOf": {
            "!type": "fn(name: string) -> +android.graphics.PorterDuff.Mode",
            "!url": "http://developer.android.com/reference/android/graphics/PorterDuff.Mode.html#valueOf(java.lang.String)"
          },
          "values": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/graphics/PorterDuff.Mode.html#values()"
          },
          "getSharedConstants": {
            "!type": "fn(enumType: +java.lang.Class) -> +java.newArray",
            "!url": "http://developer.android.com/reference/java/lang/Enum.html#getSharedConstants(java.lang.Class)"
          },
          "prototype": {
            "name": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#name()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#toString()"
            },
            "equals": {
              "!type": "fn(other: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#equals(java.lang.Object)"
            },
            "compareTo": {
              "!type": "fn(o: +java.lang.Enum) -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#compareTo(E)"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "getDeclaringClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#getDeclaringClass()"
            },
            "ordinal": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#ordinal()"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#hashCode()"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            }
          }
        },
        "intToMode": {
          "!type": "fn(val: number) -> +android.graphics.PorterDuff.Mode",
          "!url": "http://developer.android.com/reference/android/graphics/PorterDuff.html#intToMode(int)"
        },
        "modeToInt": {
          "!type": "fn(mode: +android.graphics.PorterDuff.Mode) -> number",
          "!url": "http://developer.android.com/reference/android/graphics/PorterDuff.html#modeToInt(android.graphics.PorterDuff.Mode)"
        },
        "prototype": {
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          }
        }
      },
      "EmbossMaskFilter_Delegate": {
        "!url": "http://developer.android.com/reference/android/graphics/EmbossMaskFilter_Delegate.html",
        "!type": "fn()",
        "getDelegate": {
          "!type": "fn(nativeShader: +java.lang.Long) -> +android.graphics.MaskFilter_Delegate",
          "!url": "http://developer.android.com/reference/android/graphics/MaskFilter_Delegate.html#getDelegate(long)"
        },
        "prototype": {
          "getSupportMessage": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/graphics/EmbossMaskFilter_Delegate.html#getSupportMessage()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "isSupported": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/EmbossMaskFilter_Delegate.html#isSupported()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "SumPathEffect": {
        "!url": "http://developer.android.com/reference/android/graphics/SumPathEffect.html",
        "!type": "fn(first: +android.graphics.PathEffect, second: +android.graphics.PathEffect)",
        "prototype": {
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          }
        }
      },
      "Typeface": {
        "!url": "http://developer.android.com/reference/android/graphics/Typeface.html",
        "SERIF": {
          "!type": "+android.graphics.Typeface",
          "!url": "http://developer.android.com/reference/android/graphics/Typeface.html#SERIF"
        },
        "MONOSPACE": {
          "!type": "+android.graphics.Typeface",
          "!url": "http://developer.android.com/reference/android/graphics/Typeface.html#MONOSPACE"
        },
        "ITALIC": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Typeface.html#ITALIC"
        },
        "DEFAULT": {
          "!type": "+android.graphics.Typeface",
          "!url": "http://developer.android.com/reference/android/graphics/Typeface.html#DEFAULT"
        },
        "SANS_SERIF": {
          "!type": "+android.graphics.Typeface",
          "!url": "http://developer.android.com/reference/android/graphics/Typeface.html#SANS_SERIF"
        },
        "BOLD": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Typeface.html#BOLD"
        },
        "NORMAL": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Typeface.html#NORMAL"
        },
        "BOLD_ITALIC": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Typeface.html#BOLD_ITALIC"
        },
        "DEFAULT_BOLD": {
          "!type": "+android.graphics.Typeface",
          "!url": "http://developer.android.com/reference/android/graphics/Typeface.html#DEFAULT_BOLD"
        },
        "createFromAsset": {
          "!type": "fn(mgr: +android.content.res.AssetManager, path: string) -> +android.graphics.Typeface",
          "!url": "http://developer.android.com/reference/android/graphics/Typeface.html#createFromAsset(android.content.res.AssetManager, java.lang.String)"
        },
        "defaultFromStyle": {
          "!type": "fn(style: number) -> +android.graphics.Typeface",
          "!url": "http://developer.android.com/reference/android/graphics/Typeface.html#defaultFromStyle(int)"
        },
        "create": {
          "!type": "fn(familyName: string, style: number) -> +android.graphics.Typeface",
          "!url": "http://developer.android.com/reference/android/graphics/Typeface.html#create(java.lang.String, int)"
        },
        "createFromFile": {
          "!type": "fn(path: +java.io.File) -> +android.graphics.Typeface",
          "!url": "http://developer.android.com/reference/android/graphics/Typeface.html#createFromFile(java.io.File)"
        },
        "createFromFamilies": {
          "!type": "fn(families: +java.newArray) -> +android.graphics.Typeface",
          "!url": "http://developer.android.com/reference/android/graphics/Typeface.html#createFromFamilies(android.graphics.FontFamily[])"
        },
        "createFromFamiliesWithDefault": {
          "!type": "fn(families: +java.newArray) -> +android.graphics.Typeface",
          "!url": "http://developer.android.com/reference/android/graphics/Typeface.html#createFromFamiliesWithDefault(android.graphics.FontFamily[])"
        },
        "prototype": {
          "isItalic": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Typeface.html#isItalic()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Typeface.html#equals(java.lang.Object)"
          },
          "isBold": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Typeface.html#isBold()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "getStyle": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Typeface.html#getStyle()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Typeface.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "Movie": {
        "!url": "http://developer.android.com/reference/android/graphics/Movie.html",
        "decodeFile": {
          "!type": "fn(pathName: string) -> +android.graphics.Movie",
          "!url": "http://developer.android.com/reference/android/graphics/Movie.html#decodeFile(java.lang.String)"
        },
        "decodeStream": {
          "!type": "fn(is: +java.io.InputStream) -> +android.graphics.Movie",
          "!url": "http://developer.android.com/reference/android/graphics/Movie.html#decodeStream(java.io.InputStream)"
        },
        "decodeByteArray": {
          "!type": "fn(data: +java.newArray, offset: number, length: number) -> +android.graphics.Movie",
          "!url": "http://developer.android.com/reference/android/graphics/Movie.html#decodeByteArray(byte[], int, int)"
        },
        "prototype": {
          "isOpaque": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Movie.html#isOpaque()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "width": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Movie.html#width()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "duration": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Movie.html#duration()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "setTime": {
            "!type": "fn(relativeMilliseconds: number) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Movie.html#setTime(int)"
          },
          "draw": {
            "!type": "fn(canvas: +android.graphics.Canvas, x: +java.lang.Float, y: +java.lang.Float, paint: +android.graphics.Paint) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Movie.html#draw(android.graphics.Canvas, float, float, android.graphics.Paint)"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "height": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Movie.html#height()"
          }
        }
      },
      "RadialGradient": {
        "!url": "http://developer.android.com/reference/android/graphics/RadialGradient.html",
        "!type": "fn(centerX: +java.lang.Float, centerY: +java.lang.Float, radius: +java.lang.Float, colors: +java.newArray, stops: +java.newArray, tileMode: +android.graphics.Shader.TileMode)",
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "getLocalMatrix": {
            "!type": "fn(localM: +android.graphics.Matrix) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Shader.html#getLocalMatrix(android.graphics.Matrix)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "setLocalMatrix": {
            "!type": "fn(localM: +android.graphics.Matrix) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Shader.html#setLocalMatrix(android.graphics.Matrix)"
          }
        }
      },
      "Paint_Delegate": {
        "!url": "http://developer.android.com/reference/android/graphics/Paint_Delegate.html",
        "getDelegate": {
          "!type": "fn(native_paint: +java.lang.Long) -> +android.graphics.Paint_Delegate",
          "!url": "http://developer.android.com/reference/android/graphics/Paint_Delegate.html#getDelegate(long)"
        },
        "prototype": {
          "getXfermode": {
            "!type": "fn() -> +android.graphics.Xfermode_Delegate",
            "!url": "http://developer.android.com/reference/android/graphics/Paint_Delegate.html#getXfermode()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "getColorFilter": {
            "!type": "fn() -> +android.graphics.ColorFilter_Delegate",
            "!url": "http://developer.android.com/reference/android/graphics/Paint_Delegate.html#getColorFilter()"
          },
          "getColor": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Paint_Delegate.html#getColor()"
          },
          "getJavaCap": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Paint_Delegate.html#getJavaCap()"
          },
          "getStyle": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Paint_Delegate.html#getStyle()"
          },
          "isFilterBitmap": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Paint_Delegate.html#isFilterBitmap()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "getTextAlign": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Paint_Delegate.html#getTextAlign()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "getJavaStrokeMiter": {
            "!type": "fn() -> +java.lang.Float",
            "!url": "http://developer.android.com/reference/android/graphics/Paint_Delegate.html#getJavaStrokeMiter()"
          },
          "isAntiAliased": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Paint_Delegate.html#isAntiAliased()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "setAlpha": {
            "!type": "fn(alpha: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Paint_Delegate.html#setAlpha(int)"
          },
          "getAlpha": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Paint_Delegate.html#getAlpha()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getStrokeWidth": {
            "!type": "fn() -> +java.lang.Float",
            "!url": "http://developer.android.com/reference/android/graphics/Paint_Delegate.html#getStrokeWidth()"
          },
          "getJavaStroke": {
            "!type": "fn() -> +java.awt.Stroke",
            "!url": "http://developer.android.com/reference/android/graphics/Paint_Delegate.html#getJavaStroke()"
          },
          "getRasterizer": {
            "!type": "fn() -> +android.graphics.Rasterizer_Delegate",
            "!url": "http://developer.android.com/reference/android/graphics/Paint_Delegate.html#getRasterizer()"
          },
          "getFonts": {
            "!type": "fn() -> +java.util.List",
            "!url": "http://developer.android.com/reference/android/graphics/Paint_Delegate.html#getFonts()"
          },
          "getJavaJoin": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Paint_Delegate.html#getJavaJoin()"
          },
          "getShader": {
            "!type": "fn() -> +android.graphics.Shader_Delegate",
            "!url": "http://developer.android.com/reference/android/graphics/Paint_Delegate.html#getShader()"
          },
          "getMaskFilter": {
            "!type": "fn() -> +android.graphics.MaskFilter_Delegate",
            "!url": "http://developer.android.com/reference/android/graphics/Paint_Delegate.html#getMaskFilter()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          }
        }
      },
      "FontFamily_Delegate": {
        "!url": "http://developer.android.com/reference/android/graphics/FontFamily_Delegate.html",
        "!type": "fn()",
        "FontVariant": {
          "!url": "http://developer.android.com/reference/android/graphics/FontFamily_Delegate.FontVariant.html",
          "ELEGANT": {
            "!type": "+android.graphics.FontFamily_Delegate.FontVariant",
            "!url": "http://developer.android.com/reference/android/graphics/FontFamily_Delegate.FontVariant.html#ELEGANT"
          },
          "COMPACT": {
            "!type": "+android.graphics.FontFamily_Delegate.FontVariant",
            "!url": "http://developer.android.com/reference/android/graphics/FontFamily_Delegate.FontVariant.html#COMPACT"
          },
          "NONE": {
            "!type": "+android.graphics.FontFamily_Delegate.FontVariant",
            "!url": "http://developer.android.com/reference/android/graphics/FontFamily_Delegate.FontVariant.html#NONE"
          },
          "valueOf": {
            "!type": "fn(name: string) -> +android.graphics.FontFamily_Delegate.FontVariant",
            "!url": "http://developer.android.com/reference/android/graphics/FontFamily_Delegate.FontVariant.html#valueOf(java.lang.String)"
          },
          "values": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/graphics/FontFamily_Delegate.FontVariant.html#values()"
          },
          "getSharedConstants": {
            "!type": "fn(enumType: +java.lang.Class) -> +java.newArray",
            "!url": "http://developer.android.com/reference/java/lang/Enum.html#getSharedConstants(java.lang.Class)"
          },
          "prototype": {
            "name": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#name()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#toString()"
            },
            "equals": {
              "!type": "fn(other: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#equals(java.lang.Object)"
            },
            "compareTo": {
              "!type": "fn(o: +java.lang.Enum) -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#compareTo(E)"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "getDeclaringClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#getDeclaringClass()"
            },
            "ordinal": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#ordinal()"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#hashCode()"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            }
          }
        },
        "BOLD_FONT_WEIGHT": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/FontFamily_Delegate.html#BOLD_FONT_WEIGHT"
        },
        "DEFAULT_FONT_WEIGHT": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/FontFamily_Delegate.html#DEFAULT_FONT_WEIGHT"
        },
        "BOLD_FONT_WEIGHT_DELTA": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/FontFamily_Delegate.html#BOLD_FONT_WEIGHT_DELTA"
        },
        "setFontLocation": {
          "!type": "fn(fontLocation: string) -> void",
          "!url": "http://developer.android.com/reference/android/graphics/FontFamily_Delegate.html#setFontLocation(java.lang.String)"
        },
        "getDelegate": {
          "!type": "fn(nativeFontFamily: +java.lang.Long) -> +android.graphics.FontFamily_Delegate",
          "!url": "http://developer.android.com/reference/android/graphics/FontFamily_Delegate.html#getDelegate(long)"
        },
        "prototype": {
          "getVariant": {
            "!type": "fn() -> +android.graphics.FontFamily_Delegate.FontVariant",
            "!url": "http://developer.android.com/reference/android/graphics/FontFamily_Delegate.html#getVariant()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "getFont": {
            "!type": "fn(desiredWeight: number, isItalic: bool) -> +java.awt.Font",
            "!url": "http://developer.android.com/reference/android/graphics/FontFamily_Delegate.html#getFont(int, boolean)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "isValid": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/FontFamily_Delegate.html#isValid()"
          }
        }
      },
      "MaskFilter": {
        "!url": "http://developer.android.com/reference/android/graphics/MaskFilter.html",
        "!type": "fn()",
        "prototype": {
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          }
        }
      },
      "BlendComposite": {
        "!url": "http://developer.android.com/reference/android/graphics/BlendComposite.html",
        "BlendingMode": {
          "!url": "http://developer.android.com/reference/android/graphics/BlendComposite.BlendingMode.html",
          "DARKEN": {
            "!type": "+android.graphics.BlendComposite.BlendingMode",
            "!url": "http://developer.android.com/reference/android/graphics/BlendComposite.BlendingMode.html#DARKEN"
          },
          "SCREEN": {
            "!type": "+android.graphics.BlendComposite.BlendingMode",
            "!url": "http://developer.android.com/reference/android/graphics/BlendComposite.BlendingMode.html#SCREEN"
          },
          "ADD": {
            "!type": "+android.graphics.BlendComposite.BlendingMode",
            "!url": "http://developer.android.com/reference/android/graphics/BlendComposite.BlendingMode.html#ADD"
          },
          "OVERLAY": {
            "!type": "+android.graphics.BlendComposite.BlendingMode",
            "!url": "http://developer.android.com/reference/android/graphics/BlendComposite.BlendingMode.html#OVERLAY"
          },
          "MULTIPLY": {
            "!type": "+android.graphics.BlendComposite.BlendingMode",
            "!url": "http://developer.android.com/reference/android/graphics/BlendComposite.BlendingMode.html#MULTIPLY"
          },
          "LIGHTEN": {
            "!type": "+android.graphics.BlendComposite.BlendingMode",
            "!url": "http://developer.android.com/reference/android/graphics/BlendComposite.BlendingMode.html#LIGHTEN"
          },
          "valueOf": {
            "!type": "fn(name: string) -> +android.graphics.BlendComposite.BlendingMode",
            "!url": "http://developer.android.com/reference/android/graphics/BlendComposite.BlendingMode.html#valueOf(java.lang.String)"
          },
          "values": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/graphics/BlendComposite.BlendingMode.html#values()"
          },
          "getSharedConstants": {
            "!type": "fn(enumType: +java.lang.Class) -> +java.newArray",
            "!url": "http://developer.android.com/reference/java/lang/Enum.html#getSharedConstants(java.lang.Class)"
          },
          "prototype": {
            "name": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#name()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#toString()"
            },
            "equals": {
              "!type": "fn(other: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#equals(java.lang.Object)"
            },
            "compareTo": {
              "!type": "fn(o: +java.lang.Enum) -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#compareTo(E)"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "getDeclaringClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#getDeclaringClass()"
            },
            "ordinal": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#ordinal()"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#hashCode()"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            }
          }
        },
        "getInstance": {
          "!type": "fn(mode: +android.graphics.BlendComposite.BlendingMode) -> +android.graphics.BlendComposite",
          "!url": "http://developer.android.com/reference/android/graphics/BlendComposite.html#getInstance(android.graphics.BlendComposite.BlendingMode)"
        },
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(obj: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/BlendComposite.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "getMode": {
            "!type": "fn() -> +android.graphics.BlendComposite.BlendingMode",
            "!url": "http://developer.android.com/reference/android/graphics/BlendComposite.html#getMode()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/BlendComposite.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "getAlpha": {
            "!type": "fn() -> +java.lang.Float",
            "!url": "http://developer.android.com/reference/android/graphics/BlendComposite.html#getAlpha()"
          },
          "createContext": {
            "!type": "fn(srcColorModel: +java.awt.image.ColorModel, dstColorModel: +java.awt.image.ColorModel, hints: +java.awt.RenderingHints) -> +java.awt.CompositeContext",
            "!url": "http://developer.android.com/reference/android/graphics/BlendComposite.html#createContext(java.awt.image.ColorModel, java.awt.image.ColorModel, java.awt.RenderingHints)"
          }
        }
      },
      "Canvas_Delegate": {
        "!url": "http://developer.android.com/reference/android/graphics/Canvas_Delegate.html",
        "getDelegate": {
          "!type": "fn(canvas: +android.graphics.Canvas) -> +android.graphics.Canvas_Delegate",
          "!url": "http://developer.android.com/reference/android/graphics/Canvas_Delegate.html#getDelegate(android.graphics.Canvas)"
        },
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "getDrawFilter": {
            "!type": "fn() -> +android.graphics.DrawFilter_Delegate",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas_Delegate.html#getDrawFilter()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "getSnapshot": {
            "!type": "fn() -> +com.android.layoutlib.bridge.impl.GcSnapshot",
            "!url": "http://developer.android.com/reference/android/graphics/Canvas_Delegate.html#getSnapshot()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "CanvasProperty": {
        "!url": "http://developer.android.com/reference/android/graphics/CanvasProperty.html",
        "createPaint": {
          "!type": "fn(initialValue: +android.graphics.Paint) -> +android.graphics.CanvasProperty",
          "!url": "http://developer.android.com/reference/android/graphics/CanvasProperty.html#createPaint(android.graphics.Paint)"
        },
        "createFloat": {
          "!type": "fn(initialValue: +java.lang.Float) -> +android.graphics.CanvasProperty",
          "!url": "http://developer.android.com/reference/android/graphics/CanvasProperty.html#createFloat(float)"
        },
        "prototype": {
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "getNativeContainer": {
            "!type": "fn() -> +java.lang.Long",
            "!url": "http://developer.android.com/reference/android/graphics/CanvasProperty.html#getNativeContainer()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          }
        }
      },
      "ImageFormat": {
        "!url": "http://developer.android.com/reference/android/graphics/ImageFormat.html",
        "!type": "fn()",
        "RAW12": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/ImageFormat.html#RAW12"
        },
        "RAW10": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/ImageFormat.html#RAW10"
        },
        "DEPTH16": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/ImageFormat.html#DEPTH16"
        },
        "Y8": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/ImageFormat.html#Y8"
        },
        "NV21": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/ImageFormat.html#NV21"
        },
        "PRIVATE": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/ImageFormat.html#PRIVATE"
        },
        "YUV_444_888": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/ImageFormat.html#YUV_444_888"
        },
        "RGB_565": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/ImageFormat.html#RGB_565"
        },
        "JPEG": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/ImageFormat.html#JPEG"
        },
        "YV12": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/ImageFormat.html#YV12"
        },
        "DEPTH_POINT_CLOUD": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/ImageFormat.html#DEPTH_POINT_CLOUD"
        },
        "YUV_420_888": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/ImageFormat.html#YUV_420_888"
        },
        "YUY2": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/ImageFormat.html#YUY2"
        },
        "FLEX_RGB_888": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/ImageFormat.html#FLEX_RGB_888"
        },
        "NV16": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/ImageFormat.html#NV16"
        },
        "YUV_422_888": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/ImageFormat.html#YUV_422_888"
        },
        "Y16": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/ImageFormat.html#Y16"
        },
        "FLEX_RGBA_8888": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/ImageFormat.html#FLEX_RGBA_8888"
        },
        "RAW_SENSOR": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/ImageFormat.html#RAW_SENSOR"
        },
        "UNKNOWN": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/ImageFormat.html#UNKNOWN"
        },
        "isPublicFormat": {
          "!type": "fn(format: number) -> bool",
          "!url": "http://developer.android.com/reference/android/graphics/ImageFormat.html#isPublicFormat(int)"
        },
        "getBitsPerPixel": {
          "!type": "fn(format: number) -> number",
          "!url": "http://developer.android.com/reference/android/graphics/ImageFormat.html#getBitsPerPixel(int)"
        },
        "prototype": {
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          }
        }
      },
      "PathDashPathEffect": {
        "!url": "http://developer.android.com/reference/android/graphics/PathDashPathEffect.html",
        "!type": "fn(shape: +android.graphics.Path, advance: +java.lang.Float, phase: +java.lang.Float, style: +android.graphics.PathDashPathEffect.Style)",
        "Style": {
          "!url": "http://developer.android.com/reference/android/graphics/PathDashPathEffect.Style.html",
          "ROTATE": {
            "!type": "+android.graphics.PathDashPathEffect.Style",
            "!url": "http://developer.android.com/reference/android/graphics/PathDashPathEffect.Style.html#ROTATE"
          },
          "TRANSLATE": {
            "!type": "+android.graphics.PathDashPathEffect.Style",
            "!url": "http://developer.android.com/reference/android/graphics/PathDashPathEffect.Style.html#TRANSLATE"
          },
          "MORPH": {
            "!type": "+android.graphics.PathDashPathEffect.Style",
            "!url": "http://developer.android.com/reference/android/graphics/PathDashPathEffect.Style.html#MORPH"
          },
          "valueOf": {
            "!type": "fn(name: string) -> +android.graphics.PathDashPathEffect.Style",
            "!url": "http://developer.android.com/reference/android/graphics/PathDashPathEffect.Style.html#valueOf(java.lang.String)"
          },
          "values": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/graphics/PathDashPathEffect.Style.html#values()"
          },
          "getSharedConstants": {
            "!type": "fn(enumType: +java.lang.Class) -> +java.newArray",
            "!url": "http://developer.android.com/reference/java/lang/Enum.html#getSharedConstants(java.lang.Class)"
          },
          "prototype": {
            "name": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#name()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#toString()"
            },
            "equals": {
              "!type": "fn(other: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#equals(java.lang.Object)"
            },
            "compareTo": {
              "!type": "fn(o: +java.lang.Enum) -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#compareTo(E)"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "getDeclaringClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#getDeclaringClass()"
            },
            "ordinal": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#ordinal()"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#hashCode()"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            }
          }
        },
        "prototype": {
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          }
        }
      },
      "Typeface_Delegate": {
        "!url": "http://developer.android.com/reference/android/graphics/Typeface_Delegate.html",
        "!type": "fn(fontFamilies: +java.newArray, style: number, weight: number)",
        "SYSTEM_FONTS": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/graphics/Typeface_Delegate.html#SYSTEM_FONTS"
        },
        "getDelegate": {
          "!type": "fn(nativeTypeface: +java.lang.Long) -> +android.graphics.Typeface_Delegate",
          "!url": "http://developer.android.com/reference/android/graphics/Typeface_Delegate.html#getDelegate(long)"
        },
        "resetDefaults": {
          "!type": "fn() -> void",
          "!url": "http://developer.android.com/reference/android/graphics/Typeface_Delegate.html#resetDefaults()"
        },
        "prototype": {
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "getFonts": {
            "!type": "fn(variant: +android.graphics.FontFamily_Delegate.FontVariant) -> +java.util.List",
            "!url": "http://developer.android.com/reference/android/graphics/Typeface_Delegate.html#getFonts(android.graphics.FontFamily_Delegate.FontVariant)"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          }
        }
      },
      "Color": {
        "!url": "http://developer.android.com/reference/android/graphics/Color.html",
        "!type": "fn()",
        "GREEN": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Color.html#GREEN"
        },
        "WHITE": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Color.html#WHITE"
        },
        "MAGENTA": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Color.html#MAGENTA"
        },
        "TRANSPARENT": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Color.html#TRANSPARENT"
        },
        "BLUE": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Color.html#BLUE"
        },
        "YELLOW": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Color.html#YELLOW"
        },
        "GRAY": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Color.html#GRAY"
        },
        "CYAN": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Color.html#CYAN"
        },
        "RED": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Color.html#RED"
        },
        "LTGRAY": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Color.html#LTGRAY"
        },
        "BLACK": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Color.html#BLACK"
        },
        "DKGRAY": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Color.html#DKGRAY"
        },
        "getHtmlColor": {
          "!type": "fn(color: string) -> number",
          "!url": "http://developer.android.com/reference/android/graphics/Color.html#getHtmlColor(java.lang.String)"
        },
        "colorToHSV": {
          "!type": "fn(color: number, hsv: +java.newArray) -> void",
          "!url": "http://developer.android.com/reference/android/graphics/Color.html#colorToHSV(int, float[])"
        },
        "red": {
          "!type": "fn(color: number) -> number",
          "!url": "http://developer.android.com/reference/android/graphics/Color.html#red(int)"
        },
        "alpha": {
          "!type": "fn(color: number) -> number",
          "!url": "http://developer.android.com/reference/android/graphics/Color.html#alpha(int)"
        },
        "green": {
          "!type": "fn(color: number) -> number",
          "!url": "http://developer.android.com/reference/android/graphics/Color.html#green(int)"
        },
        "argb": {
          "!type": "fn(alpha: number, red: number, green: number, blue: number) -> number",
          "!url": "http://developer.android.com/reference/android/graphics/Color.html#argb(int, int, int, int)"
        },
        "saturation": {
          "!type": "fn(color: number) -> +java.lang.Float",
          "!url": "http://developer.android.com/reference/android/graphics/Color.html#saturation(int)"
        },
        "hue": {
          "!type": "fn(color: number) -> +java.lang.Float",
          "!url": "http://developer.android.com/reference/android/graphics/Color.html#hue(int)"
        },
        "RGBToHSV": {
          "!type": "fn(red: number, green: number, blue: number, hsv: +java.newArray) -> void",
          "!url": "http://developer.android.com/reference/android/graphics/Color.html#RGBToHSV(int, int, int, float[])"
        },
        "rgb": {
          "!type": "fn(red: number, green: number, blue: number) -> number",
          "!url": "http://developer.android.com/reference/android/graphics/Color.html#rgb(int, int, int)"
        },
        "HSBtoColor": {
          "!type": "fn(hsb: +java.newArray) -> number",
          "!url": "http://developer.android.com/reference/android/graphics/Color.html#HSBtoColor(float[])"
        },
        "brightness": {
          "!type": "fn(color: number) -> +java.lang.Float",
          "!url": "http://developer.android.com/reference/android/graphics/Color.html#brightness(int)"
        },
        "HSVToColor": {
          "!type": "fn(hsv: +java.newArray) -> number",
          "!url": "http://developer.android.com/reference/android/graphics/Color.html#HSVToColor(float[])"
        },
        "blue": {
          "!type": "fn(color: number) -> number",
          "!url": "http://developer.android.com/reference/android/graphics/Color.html#blue(int)"
        },
        "parseColor": {
          "!type": "fn(colorString: string) -> number",
          "!url": "http://developer.android.com/reference/android/graphics/Color.html#parseColor(java.lang.String)"
        },
        "prototype": {
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          }
        }
      },
      "BlurMaskFilter_Delegate": {
        "!url": "http://developer.android.com/reference/android/graphics/BlurMaskFilter_Delegate.html",
        "!type": "fn()",
        "getDelegate": {
          "!type": "fn(nativeShader: +java.lang.Long) -> +android.graphics.MaskFilter_Delegate",
          "!url": "http://developer.android.com/reference/android/graphics/MaskFilter_Delegate.html#getDelegate(long)"
        },
        "prototype": {
          "getSupportMessage": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/graphics/BlurMaskFilter_Delegate.html#getSupportMessage()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "isSupported": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/BlurMaskFilter_Delegate.html#isSupported()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "PathTest": {
        "!url": "http://developer.android.com/reference/android/graphics/PathTest.html",
        "!type": "fn()",
        "prototype": {
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "testResetPreservesFillType": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/PathTest.html#testResetPreservesFillType()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          }
        }
      },
      "PixelXorXfermode": {
        "!url": "http://developer.android.com/reference/android/graphics/PixelXorXfermode.html",
        "!type": "fn(opColor: number)",
        "prototype": {
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          }
        }
      },
      "MaskFilter_Delegate": {
        "!url": "http://developer.android.com/reference/android/graphics/MaskFilter_Delegate.html",
        "!type": "fn()",
        "getDelegate": {
          "!type": "fn(nativeShader: +java.lang.Long) -> +android.graphics.MaskFilter_Delegate",
          "!url": "http://developer.android.com/reference/android/graphics/MaskFilter_Delegate.html#getDelegate(long)"
        },
        "prototype": {
          "getSupportMessage": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/graphics/MaskFilter_Delegate.html#getSupportMessage()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "isSupported": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/MaskFilter_Delegate.html#isSupported()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "Rect": {
        "!url": "http://developer.android.com/reference/android/graphics/Rect.html",
        "!type": "fn()",
        "CREATOR": {
          "!type": "+android.os.Parcelable.Creator",
          "!url": "http://developer.android.com/reference/android/graphics/Rect.html#CREATOR"
        },
        "unflattenFromString": {
          "!type": "fn(str: string) -> +android.graphics.Rect",
          "!url": "http://developer.android.com/reference/android/graphics/Rect.html#unflattenFromString(java.lang.String)"
        },
        "intersects": {
          "!type": "fn(a: +android.graphics.Rect, b: +android.graphics.Rect) -> bool",
          "!url": "http://developer.android.com/reference/android/graphics/Rect.html#intersects(android.graphics.Rect, android.graphics.Rect)"
        },
        "prototype": {
          "writeToParcel": {
            "!type": "fn(out: +android.os.Parcel, flags: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Rect.html#writeToParcel(android.os.Parcel, int)"
          },
          "exactCenterX": {
            "!type": "fn() -> +java.lang.Float",
            "!url": "http://developer.android.com/reference/android/graphics/Rect.html#exactCenterX()"
          },
          "intersects": {
            "!type": "fn(left: number, top: number, right: number, bottom: number) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Rect.html#intersects(int, int, int, int)"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "scaleRoundIn": {
            "!type": "fn(scale: +java.lang.Float) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Rect.html#scaleRoundIn(float)"
          },
          "union": {
            "!type": "fn(left: number, top: number, right: number, bottom: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Rect.html#union(int, int, int, int)"
          },
          "toShortString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/graphics/Rect.html#toShortString()"
          },
          "setIntersect": {
            "!type": "fn(a: +android.graphics.Rect, b: +android.graphics.Rect) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Rect.html#setIntersect(android.graphics.Rect, android.graphics.Rect)"
          },
          "offsetTo": {
            "!type": "fn(newLeft: number, newTop: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Rect.html#offsetTo(int, int)"
          },
          "offset": {
            "!type": "fn(dx: number, dy: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Rect.html#offset(int, int)"
          },
          "readFromParcel": {
            "!type": "fn(in: +android.os.Parcel) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Rect.html#readFromParcel(android.os.Parcel)"
          },
          "contains": {
            "!type": "fn(x: number, y: number) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Rect.html#contains(int, int)"
          },
          "centerY": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Rect.html#centerY()"
          },
          "flattenToString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/graphics/Rect.html#flattenToString()"
          },
          "centerX": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Rect.html#centerX()"
          },
          "describeContents": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Rect.html#describeContents()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Rect.html#equals(java.lang.Object)"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "set": {
            "!type": "fn(left: number, top: number, right: number, bottom: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Rect.html#set(int, int, int, int)"
          },
          "printShortString": {
            "!type": "fn(pw: +java.io.PrintWriter) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Rect.html#printShortString(java.io.PrintWriter)"
          },
          "isEmpty": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Rect.html#isEmpty()"
          },
          "height": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Rect.html#height()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "width": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Rect.html#width()"
          },
          "inset": {
            "!type": "fn(dx: number, dy: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Rect.html#inset(int, int)"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/graphics/Rect.html#toString()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Rect.html#hashCode()"
          },
          "intersect": {
            "!type": "fn(left: number, top: number, right: number, bottom: number) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Rect.html#intersect(int, int, int, int)"
          },
          "setEmpty": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Rect.html#setEmpty()"
          },
          "sort": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Rect.html#sort()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "scale": {
            "!type": "fn(scale: +java.lang.Float) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Rect.html#scale(float)"
          },
          "exactCenterY": {
            "!type": "fn() -> +java.lang.Float",
            "!url": "http://developer.android.com/reference/android/graphics/Rect.html#exactCenterY()"
          }
        }
      },
      "PaintFlagsDrawFilter": {
        "!url": "http://developer.android.com/reference/android/graphics/PaintFlagsDrawFilter.html",
        "!type": "fn(clearBits: number, setBits: number)",
        "prototype": {
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          }
        }
      },
      "ComposePathEffect_Delegate": {
        "!url": "http://developer.android.com/reference/android/graphics/ComposePathEffect_Delegate.html",
        "!type": "fn()",
        "getDelegate": {
          "!type": "fn(nativeShader: +java.lang.Long) -> +android.graphics.PathEffect_Delegate",
          "!url": "http://developer.android.com/reference/android/graphics/PathEffect_Delegate.html#getDelegate(long)"
        },
        "prototype": {
          "getSupportMessage": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/graphics/ComposePathEffect_Delegate.html#getSupportMessage()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "isSupported": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/ComposePathEffect_Delegate.html#isSupported()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "getStroke": {
            "!type": "fn(paint: +android.graphics.Paint_Delegate) -> +java.awt.Stroke",
            "!url": "http://developer.android.com/reference/android/graphics/ComposePathEffect_Delegate.html#getStroke(android.graphics.Paint_Delegate)"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "ComposeShader_Delegate": {
        "!url": "http://developer.android.com/reference/android/graphics/ComposeShader_Delegate.html",
        "!type": "fn()",
        "getDelegate": {
          "!type": "fn(nativeShader: +java.lang.Long) -> +android.graphics.Shader_Delegate",
          "!url": "http://developer.android.com/reference/android/graphics/Shader_Delegate.html#getDelegate(long)"
        },
        "getTileMode": {
          "!type": "fn(tileMode: number) -> +android.graphics.Shader.TileMode",
          "!url": "http://developer.android.com/reference/android/graphics/Shader_Delegate.html#getTileMode(int)"
        },
        "prototype": {
          "getSupportMessage": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/graphics/ComposeShader_Delegate.html#getSupportMessage()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "isSupported": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/ComposeShader_Delegate.html#isSupported()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "getJavaPaint": {
            "!type": "fn() -> +java.awt.Paint",
            "!url": "http://developer.android.com/reference/android/graphics/ComposeShader_Delegate.html#getJavaPaint()"
          }
        }
      },
      "ColorMatrixColorFilter_Delegate": {
        "!url": "http://developer.android.com/reference/android/graphics/ColorMatrixColorFilter_Delegate.html",
        "!type": "fn()",
        "getDelegate": {
          "!type": "fn(nativeShader: +java.lang.Long) -> +android.graphics.ColorFilter_Delegate",
          "!url": "http://developer.android.com/reference/android/graphics/ColorFilter_Delegate.html#getDelegate(long)"
        },
        "prototype": {
          "getSupportMessage": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/graphics/ColorMatrixColorFilter_Delegate.html#getSupportMessage()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "isSupported": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/ColorFilter_Delegate.html#isSupported()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "applyFilter": {
            "!type": "fn(g: +java.awt.Graphics2D, width: number, height: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/ColorFilter_Delegate.html#applyFilter(java.awt.Graphics2D, int, int)"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "DiscretePathEffect": {
        "!url": "http://developer.android.com/reference/android/graphics/DiscretePathEffect.html",
        "!type": "fn(segmentLength: +java.lang.Float, deviation: +java.lang.Float)",
        "prototype": {
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          }
        }
      },
      "LightingColorFilter": {
        "!url": "http://developer.android.com/reference/android/graphics/LightingColorFilter.html",
        "!type": "fn(mul: number, add: number)",
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "getColorMultiply": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/LightingColorFilter.html#getColorMultiply()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "setColorAdd": {
            "!type": "fn(add: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/LightingColorFilter.html#setColorAdd(int)"
          },
          "getColorAdd": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/LightingColorFilter.html#getColorAdd()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "setColorMultiply": {
            "!type": "fn(mul: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/LightingColorFilter.html#setColorMultiply(int)"
          }
        }
      },
      "PixelFormat": {
        "!url": "http://developer.android.com/reference/android/graphics/PixelFormat.html",
        "!type": "fn()",
        "A_8": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/PixelFormat.html#A_8"
        },
        "RGB_332": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/PixelFormat.html#RGB_332"
        },
        "RGBA_4444": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/PixelFormat.html#RGBA_4444"
        },
        "L_8": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/PixelFormat.html#L_8"
        },
        "RGB_565": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/PixelFormat.html#RGB_565"
        },
        "RGBA_8888": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/PixelFormat.html#RGBA_8888"
        },
        "JPEG": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/PixelFormat.html#JPEG"
        },
        "YCbCr_422_SP": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/PixelFormat.html#YCbCr_422_SP"
        },
        "RGBA_5551": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/PixelFormat.html#RGBA_5551"
        },
        "TRANSLUCENT": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/PixelFormat.html#TRANSLUCENT"
        },
        "RGB_888": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/PixelFormat.html#RGB_888"
        },
        "YCbCr_422_I": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/PixelFormat.html#YCbCr_422_I"
        },
        "RGBX_8888": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/PixelFormat.html#RGBX_8888"
        },
        "TRANSPARENT": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/PixelFormat.html#TRANSPARENT"
        },
        "OPAQUE": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/PixelFormat.html#OPAQUE"
        },
        "YCbCr_420_SP": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/PixelFormat.html#YCbCr_420_SP"
        },
        "UNKNOWN": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/PixelFormat.html#UNKNOWN"
        },
        "LA_88": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/PixelFormat.html#LA_88"
        },
        "isPublicFormat": {
          "!type": "fn(format: number) -> bool",
          "!url": "http://developer.android.com/reference/android/graphics/PixelFormat.html#isPublicFormat(int)"
        },
        "getPixelFormatInfo": {
          "!type": "fn(format: number, info: +android.graphics.PixelFormat) -> void",
          "!url": "http://developer.android.com/reference/android/graphics/PixelFormat.html#getPixelFormatInfo(int, android.graphics.PixelFormat)"
        },
        "formatHasAlpha": {
          "!type": "fn(format: number) -> bool",
          "!url": "http://developer.android.com/reference/android/graphics/PixelFormat.html#formatHasAlpha(int)"
        },
        "prototype": {
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          }
        }
      },
      "DashPathEffect": {
        "!url": "http://developer.android.com/reference/android/graphics/DashPathEffect.html",
        "!type": "fn(intervals: +java.newArray, phase: +java.lang.Float)",
        "prototype": {
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          }
        }
      },
      "Outline": {
        "!url": "http://developer.android.com/reference/android/graphics/Outline.html",
        "!type": "fn()",
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "offset": {
            "!type": "fn(dx: number, dy: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Outline.html#offset(int, int)"
          },
          "setConvexPath": {
            "!type": "fn(convexPath: +android.graphics.Path) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Outline.html#setConvexPath(android.graphics.Path)"
          },
          "setRect": {
            "!type": "fn(left: number, top: number, right: number, bottom: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Outline.html#setRect(int, int, int, int)"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "setRoundRect": {
            "!type": "fn(left: number, top: number, right: number, bottom: number, radius: +java.lang.Float) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Outline.html#setRoundRect(int, int, int, int, float)"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "set": {
            "!type": "fn(src: +android.graphics.Outline) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Outline.html#set(android.graphics.Outline)"
          },
          "isEmpty": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Outline.html#isEmpty()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "setAlpha": {
            "!type": "fn(alpha: +java.lang.Float) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Outline.html#setAlpha(float)"
          },
          "getAlpha": {
            "!type": "fn() -> +java.lang.Float",
            "!url": "http://developer.android.com/reference/android/graphics/Outline.html#getAlpha()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "setOval": {
            "!type": "fn(left: number, top: number, right: number, bottom: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Outline.html#setOval(int, int, int, int)"
          },
          "setEmpty": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Outline.html#setEmpty()"
          },
          "canClip": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Outline.html#canClip()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          }
        }
      },
      "PorterDuffXfermode": {
        "!url": "http://developer.android.com/reference/android/graphics/PorterDuffXfermode.html",
        "!type": "fn(mode: +android.graphics.PorterDuff.Mode)",
        "prototype": {
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          }
        }
      },
      "GraphicsPerformanceTests": {
        "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.html",
        "!type": "fn()",
        "GraphicsTestBase": {
          "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.GraphicsTestBase.html",
          "!type": "fn()",
          "prototype": {
            "getIterations": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.GraphicsTestBase.html#getIterations()"
            },
            "setTestContext": {
              "!type": "fn(context: +android.content.Context) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#setTestContext(android.content.Context)"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "getTestContext": {
              "!type": "fn() -> +android.content.Context",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#getTestContext()"
            },
            "assertWritingContentUriRequiresPermission": {
              "!type": "fn(uri: +android.net.Uri, permission: string) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertWritingContentUriRequiresPermission(android.net.Uri, java.lang.String)"
            },
            "testAndroidTestCaseSetupProperly": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#testAndroidTestCaseSetupProperly()"
            },
            "getContext": {
              "!type": "fn() -> +android.content.Context",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#getContext()"
            },
            "equals": {
              "!type": "fn(o: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
            },
            "assertReadingContentUriRequiresPermission": {
              "!type": "fn(uri: +android.net.Uri, permission: string) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertReadingContentUriRequiresPermission(android.net.Uri, java.lang.String)"
            },
            "assertActivityRequiresPermission": {
              "!type": "fn(packageName: string, className: string, permission: string) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertActivityRequiresPermission(java.lang.String, java.lang.String, java.lang.String)"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
            },
            "setUp": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.GraphicsTestBase.html#setUp()"
            },
            "setContext": {
              "!type": "fn(context: +android.content.Context) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#setContext(android.content.Context)"
            },
            "startPerformance": {
              "!type": "fn(intermediates: +android.test.PerformanceTestCase.Intermediates) -> number",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.GraphicsTestBase.html#startPerformance(android.test.PerformanceTestCase.Intermediates)"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "isPerformanceOnly": {
              "!type": "fn() -> bool",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.GraphicsTestBase.html#isPerformanceOnly()"
            }
          }
        },
        "DecodeBitmapTest": {
          "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DecodeBitmapTest.html",
          "!type": "fn()",
          "prototype": {
            "getIterations": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DecodeBitmapTest.html#getIterations()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "setTestContext": {
              "!type": "fn(context: +android.content.Context) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#setTestContext(android.content.Context)"
            },
            "getTestContext": {
              "!type": "fn() -> +android.content.Context",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#getTestContext()"
            },
            "assertWritingContentUriRequiresPermission": {
              "!type": "fn(uri: +android.net.Uri, permission: string) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertWritingContentUriRequiresPermission(android.net.Uri, java.lang.String)"
            },
            "testAndroidTestCaseSetupProperly": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#testAndroidTestCaseSetupProperly()"
            },
            "getContext": {
              "!type": "fn() -> +android.content.Context",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#getContext()"
            },
            "equals": {
              "!type": "fn(o: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
            },
            "assertReadingContentUriRequiresPermission": {
              "!type": "fn(uri: +android.net.Uri, permission: string) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertReadingContentUriRequiresPermission(android.net.Uri, java.lang.String)"
            },
            "assertActivityRequiresPermission": {
              "!type": "fn(packageName: string, className: string, permission: string) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertActivityRequiresPermission(java.lang.String, java.lang.String, java.lang.String)"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
            },
            "setUp": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DecodeBitmapTest.html#setUp()"
            },
            "testDecodeBitmap": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DecodeBitmapTest.html#testDecodeBitmap()"
            },
            "setContext": {
              "!type": "fn(context: +android.content.Context) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#setContext(android.content.Context)"
            },
            "startPerformance": {
              "!type": "fn(intermediates: +android.test.PerformanceTestCase.Intermediates) -> number",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.GraphicsTestBase.html#startPerformance(android.test.PerformanceTestCase.Intermediates)"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "isPerformanceOnly": {
              "!type": "fn() -> bool",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.GraphicsTestBase.html#isPerformanceOnly()"
            }
          }
        },
        "DrawBitmapTest": {
          "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html",
          "!type": "fn()",
          "prototype": {
            "getIterations": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#getIterations()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "setTestContext": {
              "!type": "fn(context: +android.content.Context) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#setTestContext(android.content.Context)"
            },
            "getTestContext": {
              "!type": "fn() -> +android.content.Context",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#getTestContext()"
            },
            "assertWritingContentUriRequiresPermission": {
              "!type": "fn(uri: +android.net.Uri, permission: string) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertWritingContentUriRequiresPermission(android.net.Uri, java.lang.String)"
            },
            "testAndroidTestCaseSetupProperly": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#testAndroidTestCaseSetupProperly()"
            },
            "drawBitmapEven": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#drawBitmapEven()"
            },
            "getContext": {
              "!type": "fn() -> +android.content.Context",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#getContext()"
            },
            "equals": {
              "!type": "fn(o: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "createBitmap": {
              "!type": "fn() -> +android.graphics.Bitmap",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#createBitmap()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
            },
            "assertReadingContentUriRequiresPermission": {
              "!type": "fn(uri: +android.net.Uri, permission: string) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertReadingContentUriRequiresPermission(android.net.Uri, java.lang.String)"
            },
            "assertActivityRequiresPermission": {
              "!type": "fn(packageName: string, className: string, permission: string) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertActivityRequiresPermission(java.lang.String, java.lang.String, java.lang.String)"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
            },
            "setUp": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#setUp()"
            },
            "setContext": {
              "!type": "fn(context: +android.content.Context) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#setContext(android.content.Context)"
            },
            "drawBitmapOdd": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#drawBitmapOdd()"
            },
            "startPerformance": {
              "!type": "fn(intermediates: +android.test.PerformanceTestCase.Intermediates) -> number",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.GraphicsTestBase.html#startPerformance(android.test.PerformanceTestCase.Intermediates)"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "isPerformanceOnly": {
              "!type": "fn() -> bool",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.GraphicsTestBase.html#isPerformanceOnly()"
            }
          }
        },
        "DrawBitmap7x7": {
          "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap7x7.html",
          "!type": "fn()",
          "prototype": {
            "getIterations": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#getIterations()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "setTestContext": {
              "!type": "fn(context: +android.content.Context) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#setTestContext(android.content.Context)"
            },
            "testDrawBitmapOdd": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap7x7.html#testDrawBitmapOdd()"
            },
            "getTestContext": {
              "!type": "fn() -> +android.content.Context",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#getTestContext()"
            },
            "assertWritingContentUriRequiresPermission": {
              "!type": "fn(uri: +android.net.Uri, permission: string) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertWritingContentUriRequiresPermission(android.net.Uri, java.lang.String)"
            },
            "testAndroidTestCaseSetupProperly": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#testAndroidTestCaseSetupProperly()"
            },
            "drawBitmapEven": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#drawBitmapEven()"
            },
            "getContext": {
              "!type": "fn() -> +android.content.Context",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#getContext()"
            },
            "equals": {
              "!type": "fn(o: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "createBitmap": {
              "!type": "fn() -> +android.graphics.Bitmap",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap7x7.html#createBitmap()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
            },
            "assertReadingContentUriRequiresPermission": {
              "!type": "fn(uri: +android.net.Uri, permission: string) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertReadingContentUriRequiresPermission(android.net.Uri, java.lang.String)"
            },
            "assertActivityRequiresPermission": {
              "!type": "fn(packageName: string, className: string, permission: string) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertActivityRequiresPermission(java.lang.String, java.lang.String, java.lang.String)"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
            },
            "setUp": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#setUp()"
            },
            "setContext": {
              "!type": "fn(context: +android.content.Context) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#setContext(android.content.Context)"
            },
            "testDrawBitmapEven": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap7x7.html#testDrawBitmapEven()"
            },
            "drawBitmapOdd": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#drawBitmapOdd()"
            },
            "startPerformance": {
              "!type": "fn(intermediates: +android.test.PerformanceTestCase.Intermediates) -> number",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.GraphicsTestBase.html#startPerformance(android.test.PerformanceTestCase.Intermediates)"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "isPerformanceOnly": {
              "!type": "fn() -> bool",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.GraphicsTestBase.html#isPerformanceOnly()"
            }
          }
        },
        "DrawBitmap15x15": {
          "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap15x15.html",
          "!type": "fn()",
          "prototype": {
            "getIterations": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#getIterations()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "setTestContext": {
              "!type": "fn(context: +android.content.Context) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#setTestContext(android.content.Context)"
            },
            "testDrawBitmapOdd": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap15x15.html#testDrawBitmapOdd()"
            },
            "getTestContext": {
              "!type": "fn() -> +android.content.Context",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#getTestContext()"
            },
            "assertWritingContentUriRequiresPermission": {
              "!type": "fn(uri: +android.net.Uri, permission: string) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertWritingContentUriRequiresPermission(android.net.Uri, java.lang.String)"
            },
            "testAndroidTestCaseSetupProperly": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#testAndroidTestCaseSetupProperly()"
            },
            "drawBitmapEven": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#drawBitmapEven()"
            },
            "getContext": {
              "!type": "fn() -> +android.content.Context",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#getContext()"
            },
            "equals": {
              "!type": "fn(o: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "createBitmap": {
              "!type": "fn() -> +android.graphics.Bitmap",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap15x15.html#createBitmap()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
            },
            "assertReadingContentUriRequiresPermission": {
              "!type": "fn(uri: +android.net.Uri, permission: string) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertReadingContentUriRequiresPermission(android.net.Uri, java.lang.String)"
            },
            "assertActivityRequiresPermission": {
              "!type": "fn(packageName: string, className: string, permission: string) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertActivityRequiresPermission(java.lang.String, java.lang.String, java.lang.String)"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
            },
            "setUp": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#setUp()"
            },
            "setContext": {
              "!type": "fn(context: +android.content.Context) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#setContext(android.content.Context)"
            },
            "testDrawBitmapEven": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap15x15.html#testDrawBitmapEven()"
            },
            "drawBitmapOdd": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#drawBitmapOdd()"
            },
            "startPerformance": {
              "!type": "fn(intermediates: +android.test.PerformanceTestCase.Intermediates) -> number",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.GraphicsTestBase.html#startPerformance(android.test.PerformanceTestCase.Intermediates)"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "isPerformanceOnly": {
              "!type": "fn() -> bool",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.GraphicsTestBase.html#isPerformanceOnly()"
            }
          }
        },
        "DrawBitmap31x31": {
          "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap31x31.html",
          "!type": "fn()",
          "prototype": {
            "getIterations": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#getIterations()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "setTestContext": {
              "!type": "fn(context: +android.content.Context) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#setTestContext(android.content.Context)"
            },
            "testDrawBitmapOdd": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap31x31.html#testDrawBitmapOdd()"
            },
            "getTestContext": {
              "!type": "fn() -> +android.content.Context",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#getTestContext()"
            },
            "assertWritingContentUriRequiresPermission": {
              "!type": "fn(uri: +android.net.Uri, permission: string) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertWritingContentUriRequiresPermission(android.net.Uri, java.lang.String)"
            },
            "testAndroidTestCaseSetupProperly": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#testAndroidTestCaseSetupProperly()"
            },
            "drawBitmapEven": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#drawBitmapEven()"
            },
            "getContext": {
              "!type": "fn() -> +android.content.Context",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#getContext()"
            },
            "equals": {
              "!type": "fn(o: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "createBitmap": {
              "!type": "fn() -> +android.graphics.Bitmap",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap31x31.html#createBitmap()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
            },
            "assertReadingContentUriRequiresPermission": {
              "!type": "fn(uri: +android.net.Uri, permission: string) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertReadingContentUriRequiresPermission(android.net.Uri, java.lang.String)"
            },
            "assertActivityRequiresPermission": {
              "!type": "fn(packageName: string, className: string, permission: string) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertActivityRequiresPermission(java.lang.String, java.lang.String, java.lang.String)"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
            },
            "setUp": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#setUp()"
            },
            "setContext": {
              "!type": "fn(context: +android.content.Context) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#setContext(android.content.Context)"
            },
            "testDrawBitmapEven": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap31x31.html#testDrawBitmapEven()"
            },
            "drawBitmapOdd": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#drawBitmapOdd()"
            },
            "startPerformance": {
              "!type": "fn(intermediates: +android.test.PerformanceTestCase.Intermediates) -> number",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.GraphicsTestBase.html#startPerformance(android.test.PerformanceTestCase.Intermediates)"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "isPerformanceOnly": {
              "!type": "fn() -> bool",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.GraphicsTestBase.html#isPerformanceOnly()"
            }
          }
        },
        "DrawBitmap63x63": {
          "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap63x63.html",
          "!type": "fn()",
          "prototype": {
            "getIterations": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#getIterations()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "setTestContext": {
              "!type": "fn(context: +android.content.Context) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#setTestContext(android.content.Context)"
            },
            "testDrawBitmapOdd": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap63x63.html#testDrawBitmapOdd()"
            },
            "getTestContext": {
              "!type": "fn() -> +android.content.Context",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#getTestContext()"
            },
            "assertWritingContentUriRequiresPermission": {
              "!type": "fn(uri: +android.net.Uri, permission: string) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertWritingContentUriRequiresPermission(android.net.Uri, java.lang.String)"
            },
            "testAndroidTestCaseSetupProperly": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#testAndroidTestCaseSetupProperly()"
            },
            "drawBitmapEven": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#drawBitmapEven()"
            },
            "getContext": {
              "!type": "fn() -> +android.content.Context",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#getContext()"
            },
            "equals": {
              "!type": "fn(o: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "createBitmap": {
              "!type": "fn() -> +android.graphics.Bitmap",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap63x63.html#createBitmap()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
            },
            "assertReadingContentUriRequiresPermission": {
              "!type": "fn(uri: +android.net.Uri, permission: string) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertReadingContentUriRequiresPermission(android.net.Uri, java.lang.String)"
            },
            "assertActivityRequiresPermission": {
              "!type": "fn(packageName: string, className: string, permission: string) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertActivityRequiresPermission(java.lang.String, java.lang.String, java.lang.String)"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
            },
            "setUp": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#setUp()"
            },
            "setContext": {
              "!type": "fn(context: +android.content.Context) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#setContext(android.content.Context)"
            },
            "testDrawBitmapEven": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap63x63.html#testDrawBitmapEven()"
            },
            "drawBitmapOdd": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#drawBitmapOdd()"
            },
            "startPerformance": {
              "!type": "fn(intermediates: +android.test.PerformanceTestCase.Intermediates) -> number",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.GraphicsTestBase.html#startPerformance(android.test.PerformanceTestCase.Intermediates)"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "isPerformanceOnly": {
              "!type": "fn() -> bool",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.GraphicsTestBase.html#isPerformanceOnly()"
            }
          }
        },
        "DrawBitmap127x127": {
          "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap127x127.html",
          "!type": "fn()",
          "prototype": {
            "getIterations": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#getIterations()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "setTestContext": {
              "!type": "fn(context: +android.content.Context) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#setTestContext(android.content.Context)"
            },
            "testDrawBitmapOdd": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap127x127.html#testDrawBitmapOdd()"
            },
            "getTestContext": {
              "!type": "fn() -> +android.content.Context",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#getTestContext()"
            },
            "assertWritingContentUriRequiresPermission": {
              "!type": "fn(uri: +android.net.Uri, permission: string) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertWritingContentUriRequiresPermission(android.net.Uri, java.lang.String)"
            },
            "testAndroidTestCaseSetupProperly": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#testAndroidTestCaseSetupProperly()"
            },
            "drawBitmapEven": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#drawBitmapEven()"
            },
            "getContext": {
              "!type": "fn() -> +android.content.Context",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#getContext()"
            },
            "equals": {
              "!type": "fn(o: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "createBitmap": {
              "!type": "fn() -> +android.graphics.Bitmap",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap127x127.html#createBitmap()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
            },
            "assertReadingContentUriRequiresPermission": {
              "!type": "fn(uri: +android.net.Uri, permission: string) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertReadingContentUriRequiresPermission(android.net.Uri, java.lang.String)"
            },
            "assertActivityRequiresPermission": {
              "!type": "fn(packageName: string, className: string, permission: string) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertActivityRequiresPermission(java.lang.String, java.lang.String, java.lang.String)"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
            },
            "setUp": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#setUp()"
            },
            "setContext": {
              "!type": "fn(context: +android.content.Context) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#setContext(android.content.Context)"
            },
            "testDrawBitmapEven": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap127x127.html#testDrawBitmapEven()"
            },
            "drawBitmapOdd": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#drawBitmapOdd()"
            },
            "startPerformance": {
              "!type": "fn(intermediates: +android.test.PerformanceTestCase.Intermediates) -> number",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.GraphicsTestBase.html#startPerformance(android.test.PerformanceTestCase.Intermediates)"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "isPerformanceOnly": {
              "!type": "fn() -> bool",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.GraphicsTestBase.html#isPerformanceOnly()"
            }
          }
        },
        "DrawBitmap319x239": {
          "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap319x239.html",
          "!type": "fn()",
          "prototype": {
            "getIterations": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#getIterations()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "setTestContext": {
              "!type": "fn(context: +android.content.Context) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#setTestContext(android.content.Context)"
            },
            "testDrawBitmapOdd": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap319x239.html#testDrawBitmapOdd()"
            },
            "getTestContext": {
              "!type": "fn() -> +android.content.Context",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#getTestContext()"
            },
            "assertWritingContentUriRequiresPermission": {
              "!type": "fn(uri: +android.net.Uri, permission: string) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertWritingContentUriRequiresPermission(android.net.Uri, java.lang.String)"
            },
            "testAndroidTestCaseSetupProperly": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#testAndroidTestCaseSetupProperly()"
            },
            "drawBitmapEven": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#drawBitmapEven()"
            },
            "getContext": {
              "!type": "fn() -> +android.content.Context",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#getContext()"
            },
            "equals": {
              "!type": "fn(o: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "createBitmap": {
              "!type": "fn() -> +android.graphics.Bitmap",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap319x239.html#createBitmap()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
            },
            "assertReadingContentUriRequiresPermission": {
              "!type": "fn(uri: +android.net.Uri, permission: string) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertReadingContentUriRequiresPermission(android.net.Uri, java.lang.String)"
            },
            "assertActivityRequiresPermission": {
              "!type": "fn(packageName: string, className: string, permission: string) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertActivityRequiresPermission(java.lang.String, java.lang.String, java.lang.String)"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
            },
            "setUp": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#setUp()"
            },
            "setContext": {
              "!type": "fn(context: +android.content.Context) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#setContext(android.content.Context)"
            },
            "testDrawBitmapEven": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap319x239.html#testDrawBitmapEven()"
            },
            "drawBitmapOdd": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#drawBitmapOdd()"
            },
            "startPerformance": {
              "!type": "fn(intermediates: +android.test.PerformanceTestCase.Intermediates) -> number",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.GraphicsTestBase.html#startPerformance(android.test.PerformanceTestCase.Intermediates)"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "isPerformanceOnly": {
              "!type": "fn() -> bool",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.GraphicsTestBase.html#isPerformanceOnly()"
            }
          }
        },
        "DrawBitmap319x479": {
          "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap319x479.html",
          "!type": "fn()",
          "prototype": {
            "getIterations": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#getIterations()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "setTestContext": {
              "!type": "fn(context: +android.content.Context) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#setTestContext(android.content.Context)"
            },
            "testDrawBitmapOdd": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap319x479.html#testDrawBitmapOdd()"
            },
            "getTestContext": {
              "!type": "fn() -> +android.content.Context",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#getTestContext()"
            },
            "assertWritingContentUriRequiresPermission": {
              "!type": "fn(uri: +android.net.Uri, permission: string) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertWritingContentUriRequiresPermission(android.net.Uri, java.lang.String)"
            },
            "testAndroidTestCaseSetupProperly": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#testAndroidTestCaseSetupProperly()"
            },
            "drawBitmapEven": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#drawBitmapEven()"
            },
            "getContext": {
              "!type": "fn() -> +android.content.Context",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#getContext()"
            },
            "equals": {
              "!type": "fn(o: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "createBitmap": {
              "!type": "fn() -> +android.graphics.Bitmap",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap319x479.html#createBitmap()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
            },
            "assertReadingContentUriRequiresPermission": {
              "!type": "fn(uri: +android.net.Uri, permission: string) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertReadingContentUriRequiresPermission(android.net.Uri, java.lang.String)"
            },
            "assertActivityRequiresPermission": {
              "!type": "fn(packageName: string, className: string, permission: string) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertActivityRequiresPermission(java.lang.String, java.lang.String, java.lang.String)"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
            },
            "setUp": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#setUp()"
            },
            "setContext": {
              "!type": "fn(context: +android.content.Context) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#setContext(android.content.Context)"
            },
            "testDrawBitmapEven": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap319x479.html#testDrawBitmapEven()"
            },
            "drawBitmapOdd": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#drawBitmapOdd()"
            },
            "startPerformance": {
              "!type": "fn(intermediates: +android.test.PerformanceTestCase.Intermediates) -> number",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.GraphicsTestBase.html#startPerformance(android.test.PerformanceTestCase.Intermediates)"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "isPerformanceOnly": {
              "!type": "fn() -> bool",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.GraphicsTestBase.html#isPerformanceOnly()"
            }
          }
        },
        "DrawBitmap8x8": {
          "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap8x8.html",
          "!type": "fn()",
          "prototype": {
            "getIterations": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#getIterations()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "setTestContext": {
              "!type": "fn(context: +android.content.Context) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#setTestContext(android.content.Context)"
            },
            "testDrawBitmapOdd": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap8x8.html#testDrawBitmapOdd()"
            },
            "getTestContext": {
              "!type": "fn() -> +android.content.Context",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#getTestContext()"
            },
            "assertWritingContentUriRequiresPermission": {
              "!type": "fn(uri: +android.net.Uri, permission: string) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertWritingContentUriRequiresPermission(android.net.Uri, java.lang.String)"
            },
            "testAndroidTestCaseSetupProperly": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#testAndroidTestCaseSetupProperly()"
            },
            "drawBitmapEven": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#drawBitmapEven()"
            },
            "getContext": {
              "!type": "fn() -> +android.content.Context",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#getContext()"
            },
            "equals": {
              "!type": "fn(o: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "createBitmap": {
              "!type": "fn() -> +android.graphics.Bitmap",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap8x8.html#createBitmap()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
            },
            "assertReadingContentUriRequiresPermission": {
              "!type": "fn(uri: +android.net.Uri, permission: string) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertReadingContentUriRequiresPermission(android.net.Uri, java.lang.String)"
            },
            "assertActivityRequiresPermission": {
              "!type": "fn(packageName: string, className: string, permission: string) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertActivityRequiresPermission(java.lang.String, java.lang.String, java.lang.String)"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
            },
            "setUp": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#setUp()"
            },
            "setContext": {
              "!type": "fn(context: +android.content.Context) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#setContext(android.content.Context)"
            },
            "testDrawBitmapEven": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap8x8.html#testDrawBitmapEven()"
            },
            "drawBitmapOdd": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#drawBitmapOdd()"
            },
            "startPerformance": {
              "!type": "fn(intermediates: +android.test.PerformanceTestCase.Intermediates) -> number",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.GraphicsTestBase.html#startPerformance(android.test.PerformanceTestCase.Intermediates)"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "isPerformanceOnly": {
              "!type": "fn() -> bool",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.GraphicsTestBase.html#isPerformanceOnly()"
            }
          }
        },
        "DrawBitmap16x16": {
          "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap16x16.html",
          "!type": "fn()",
          "prototype": {
            "getIterations": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#getIterations()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "setTestContext": {
              "!type": "fn(context: +android.content.Context) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#setTestContext(android.content.Context)"
            },
            "testDrawBitmapOdd": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap16x16.html#testDrawBitmapOdd()"
            },
            "getTestContext": {
              "!type": "fn() -> +android.content.Context",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#getTestContext()"
            },
            "assertWritingContentUriRequiresPermission": {
              "!type": "fn(uri: +android.net.Uri, permission: string) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertWritingContentUriRequiresPermission(android.net.Uri, java.lang.String)"
            },
            "testAndroidTestCaseSetupProperly": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#testAndroidTestCaseSetupProperly()"
            },
            "drawBitmapEven": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#drawBitmapEven()"
            },
            "getContext": {
              "!type": "fn() -> +android.content.Context",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#getContext()"
            },
            "equals": {
              "!type": "fn(o: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "createBitmap": {
              "!type": "fn() -> +android.graphics.Bitmap",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap16x16.html#createBitmap()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
            },
            "assertReadingContentUriRequiresPermission": {
              "!type": "fn(uri: +android.net.Uri, permission: string) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertReadingContentUriRequiresPermission(android.net.Uri, java.lang.String)"
            },
            "assertActivityRequiresPermission": {
              "!type": "fn(packageName: string, className: string, permission: string) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertActivityRequiresPermission(java.lang.String, java.lang.String, java.lang.String)"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
            },
            "setUp": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#setUp()"
            },
            "setContext": {
              "!type": "fn(context: +android.content.Context) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#setContext(android.content.Context)"
            },
            "testDrawBitmapEven": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap16x16.html#testDrawBitmapEven()"
            },
            "drawBitmapOdd": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#drawBitmapOdd()"
            },
            "startPerformance": {
              "!type": "fn(intermediates: +android.test.PerformanceTestCase.Intermediates) -> number",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.GraphicsTestBase.html#startPerformance(android.test.PerformanceTestCase.Intermediates)"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "isPerformanceOnly": {
              "!type": "fn() -> bool",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.GraphicsTestBase.html#isPerformanceOnly()"
            }
          }
        },
        "DrawBitmap32x32": {
          "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap32x32.html",
          "!type": "fn()",
          "prototype": {
            "getIterations": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#getIterations()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "setTestContext": {
              "!type": "fn(context: +android.content.Context) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#setTestContext(android.content.Context)"
            },
            "testDrawBitmapOdd": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap32x32.html#testDrawBitmapOdd()"
            },
            "getTestContext": {
              "!type": "fn() -> +android.content.Context",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#getTestContext()"
            },
            "assertWritingContentUriRequiresPermission": {
              "!type": "fn(uri: +android.net.Uri, permission: string) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertWritingContentUriRequiresPermission(android.net.Uri, java.lang.String)"
            },
            "testAndroidTestCaseSetupProperly": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#testAndroidTestCaseSetupProperly()"
            },
            "drawBitmapEven": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#drawBitmapEven()"
            },
            "getContext": {
              "!type": "fn() -> +android.content.Context",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#getContext()"
            },
            "equals": {
              "!type": "fn(o: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "createBitmap": {
              "!type": "fn() -> +android.graphics.Bitmap",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap32x32.html#createBitmap()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
            },
            "assertReadingContentUriRequiresPermission": {
              "!type": "fn(uri: +android.net.Uri, permission: string) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertReadingContentUriRequiresPermission(android.net.Uri, java.lang.String)"
            },
            "assertActivityRequiresPermission": {
              "!type": "fn(packageName: string, className: string, permission: string) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertActivityRequiresPermission(java.lang.String, java.lang.String, java.lang.String)"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
            },
            "setUp": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#setUp()"
            },
            "setContext": {
              "!type": "fn(context: +android.content.Context) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#setContext(android.content.Context)"
            },
            "testDrawBitmapEven": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap32x32.html#testDrawBitmapEven()"
            },
            "drawBitmapOdd": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#drawBitmapOdd()"
            },
            "startPerformance": {
              "!type": "fn(intermediates: +android.test.PerformanceTestCase.Intermediates) -> number",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.GraphicsTestBase.html#startPerformance(android.test.PerformanceTestCase.Intermediates)"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "isPerformanceOnly": {
              "!type": "fn() -> bool",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.GraphicsTestBase.html#isPerformanceOnly()"
            }
          }
        },
        "DrawBitmap64x64": {
          "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap64x64.html",
          "!type": "fn()",
          "prototype": {
            "getIterations": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#getIterations()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "setTestContext": {
              "!type": "fn(context: +android.content.Context) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#setTestContext(android.content.Context)"
            },
            "testDrawBitmapOdd": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap64x64.html#testDrawBitmapOdd()"
            },
            "getTestContext": {
              "!type": "fn() -> +android.content.Context",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#getTestContext()"
            },
            "assertWritingContentUriRequiresPermission": {
              "!type": "fn(uri: +android.net.Uri, permission: string) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertWritingContentUriRequiresPermission(android.net.Uri, java.lang.String)"
            },
            "testAndroidTestCaseSetupProperly": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#testAndroidTestCaseSetupProperly()"
            },
            "drawBitmapEven": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#drawBitmapEven()"
            },
            "getContext": {
              "!type": "fn() -> +android.content.Context",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#getContext()"
            },
            "equals": {
              "!type": "fn(o: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "createBitmap": {
              "!type": "fn() -> +android.graphics.Bitmap",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap64x64.html#createBitmap()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
            },
            "assertReadingContentUriRequiresPermission": {
              "!type": "fn(uri: +android.net.Uri, permission: string) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertReadingContentUriRequiresPermission(android.net.Uri, java.lang.String)"
            },
            "assertActivityRequiresPermission": {
              "!type": "fn(packageName: string, className: string, permission: string) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertActivityRequiresPermission(java.lang.String, java.lang.String, java.lang.String)"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
            },
            "setUp": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#setUp()"
            },
            "setContext": {
              "!type": "fn(context: +android.content.Context) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#setContext(android.content.Context)"
            },
            "testDrawBitmapEven": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap64x64.html#testDrawBitmapEven()"
            },
            "drawBitmapOdd": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#drawBitmapOdd()"
            },
            "startPerformance": {
              "!type": "fn(intermediates: +android.test.PerformanceTestCase.Intermediates) -> number",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.GraphicsTestBase.html#startPerformance(android.test.PerformanceTestCase.Intermediates)"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "isPerformanceOnly": {
              "!type": "fn() -> bool",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.GraphicsTestBase.html#isPerformanceOnly()"
            }
          }
        },
        "DrawBitmap128x128": {
          "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap128x128.html",
          "!type": "fn()",
          "prototype": {
            "getIterations": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#getIterations()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "setTestContext": {
              "!type": "fn(context: +android.content.Context) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#setTestContext(android.content.Context)"
            },
            "testDrawBitmapOdd": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap128x128.html#testDrawBitmapOdd()"
            },
            "getTestContext": {
              "!type": "fn() -> +android.content.Context",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#getTestContext()"
            },
            "assertWritingContentUriRequiresPermission": {
              "!type": "fn(uri: +android.net.Uri, permission: string) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertWritingContentUriRequiresPermission(android.net.Uri, java.lang.String)"
            },
            "testAndroidTestCaseSetupProperly": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#testAndroidTestCaseSetupProperly()"
            },
            "drawBitmapEven": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#drawBitmapEven()"
            },
            "getContext": {
              "!type": "fn() -> +android.content.Context",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#getContext()"
            },
            "equals": {
              "!type": "fn(o: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "createBitmap": {
              "!type": "fn() -> +android.graphics.Bitmap",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap128x128.html#createBitmap()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
            },
            "assertReadingContentUriRequiresPermission": {
              "!type": "fn(uri: +android.net.Uri, permission: string) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertReadingContentUriRequiresPermission(android.net.Uri, java.lang.String)"
            },
            "assertActivityRequiresPermission": {
              "!type": "fn(packageName: string, className: string, permission: string) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertActivityRequiresPermission(java.lang.String, java.lang.String, java.lang.String)"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
            },
            "setUp": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#setUp()"
            },
            "setContext": {
              "!type": "fn(context: +android.content.Context) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#setContext(android.content.Context)"
            },
            "testDrawBitmapEven": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap128x128.html#testDrawBitmapEven()"
            },
            "drawBitmapOdd": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#drawBitmapOdd()"
            },
            "startPerformance": {
              "!type": "fn(intermediates: +android.test.PerformanceTestCase.Intermediates) -> number",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.GraphicsTestBase.html#startPerformance(android.test.PerformanceTestCase.Intermediates)"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "isPerformanceOnly": {
              "!type": "fn() -> bool",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.GraphicsTestBase.html#isPerformanceOnly()"
            }
          }
        },
        "DrawBitmap320x240": {
          "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap320x240.html",
          "!type": "fn()",
          "prototype": {
            "getIterations": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#getIterations()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "setTestContext": {
              "!type": "fn(context: +android.content.Context) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#setTestContext(android.content.Context)"
            },
            "testDrawBitmapOdd": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap320x240.html#testDrawBitmapOdd()"
            },
            "getTestContext": {
              "!type": "fn() -> +android.content.Context",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#getTestContext()"
            },
            "assertWritingContentUriRequiresPermission": {
              "!type": "fn(uri: +android.net.Uri, permission: string) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertWritingContentUriRequiresPermission(android.net.Uri, java.lang.String)"
            },
            "testAndroidTestCaseSetupProperly": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#testAndroidTestCaseSetupProperly()"
            },
            "drawBitmapEven": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#drawBitmapEven()"
            },
            "getContext": {
              "!type": "fn() -> +android.content.Context",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#getContext()"
            },
            "equals": {
              "!type": "fn(o: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "createBitmap": {
              "!type": "fn() -> +android.graphics.Bitmap",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap320x240.html#createBitmap()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
            },
            "assertReadingContentUriRequiresPermission": {
              "!type": "fn(uri: +android.net.Uri, permission: string) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertReadingContentUriRequiresPermission(android.net.Uri, java.lang.String)"
            },
            "assertActivityRequiresPermission": {
              "!type": "fn(packageName: string, className: string, permission: string) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertActivityRequiresPermission(java.lang.String, java.lang.String, java.lang.String)"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
            },
            "setUp": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#setUp()"
            },
            "setContext": {
              "!type": "fn(context: +android.content.Context) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#setContext(android.content.Context)"
            },
            "testDrawBitmapEven": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap320x240.html#testDrawBitmapEven()"
            },
            "drawBitmapOdd": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#drawBitmapOdd()"
            },
            "startPerformance": {
              "!type": "fn(intermediates: +android.test.PerformanceTestCase.Intermediates) -> number",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.GraphicsTestBase.html#startPerformance(android.test.PerformanceTestCase.Intermediates)"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "isPerformanceOnly": {
              "!type": "fn() -> bool",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.GraphicsTestBase.html#isPerformanceOnly()"
            }
          }
        },
        "DrawBitmap320x480": {
          "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap320x480.html",
          "!type": "fn()",
          "prototype": {
            "getIterations": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#getIterations()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "setTestContext": {
              "!type": "fn(context: +android.content.Context) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#setTestContext(android.content.Context)"
            },
            "testDrawBitmapOdd": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap320x480.html#testDrawBitmapOdd()"
            },
            "getTestContext": {
              "!type": "fn() -> +android.content.Context",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#getTestContext()"
            },
            "assertWritingContentUriRequiresPermission": {
              "!type": "fn(uri: +android.net.Uri, permission: string) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertWritingContentUriRequiresPermission(android.net.Uri, java.lang.String)"
            },
            "testAndroidTestCaseSetupProperly": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#testAndroidTestCaseSetupProperly()"
            },
            "drawBitmapEven": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#drawBitmapEven()"
            },
            "getContext": {
              "!type": "fn() -> +android.content.Context",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#getContext()"
            },
            "equals": {
              "!type": "fn(o: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "createBitmap": {
              "!type": "fn() -> +android.graphics.Bitmap",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap320x480.html#createBitmap()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
            },
            "assertReadingContentUriRequiresPermission": {
              "!type": "fn(uri: +android.net.Uri, permission: string) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertReadingContentUriRequiresPermission(android.net.Uri, java.lang.String)"
            },
            "assertActivityRequiresPermission": {
              "!type": "fn(packageName: string, className: string, permission: string) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertActivityRequiresPermission(java.lang.String, java.lang.String, java.lang.String)"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
            },
            "setUp": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#setUp()"
            },
            "setContext": {
              "!type": "fn(context: +android.content.Context) -> void",
              "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#setContext(android.content.Context)"
            },
            "testDrawBitmapEven": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmap320x480.html#testDrawBitmapEven()"
            },
            "drawBitmapOdd": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.DrawBitmapTest.html#drawBitmapOdd()"
            },
            "startPerformance": {
              "!type": "fn(intermediates: +android.test.PerformanceTestCase.Intermediates) -> number",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.GraphicsTestBase.html#startPerformance(android.test.PerformanceTestCase.Intermediates)"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "isPerformanceOnly": {
              "!type": "fn() -> bool",
              "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.GraphicsTestBase.html#isPerformanceOnly()"
            }
          }
        },
        "children": {
          "!type": "fn() -> +java.newArray",
          "!url": "http://developer.android.com/reference/android/graphics/GraphicsPerformanceTests.html#children()"
        },
        "prototype": {
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          }
        }
      },
      "AvoidXfermode_Delegate": {
        "!url": "http://developer.android.com/reference/android/graphics/AvoidXfermode_Delegate.html",
        "!type": "fn()",
        "getDelegate": {
          "!type": "fn(native_instance: +java.lang.Long) -> +android.graphics.Xfermode_Delegate",
          "!url": "http://developer.android.com/reference/android/graphics/Xfermode_Delegate.html#getDelegate(long)"
        },
        "prototype": {
          "getSupportMessage": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/graphics/AvoidXfermode_Delegate.html#getSupportMessage()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "isSupported": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/AvoidXfermode_Delegate.html#isSupported()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "getComposite": {
            "!type": "fn(alpha: number) -> +java.awt.Composite",
            "!url": "http://developer.android.com/reference/android/graphics/AvoidXfermode_Delegate.html#getComposite(int)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "Path_Delegate": {
        "!url": "http://developer.android.com/reference/android/graphics/Path_Delegate.html",
        "!type": "fn()",
        "getDelegate": {
          "!type": "fn(nPath: +java.lang.Long) -> +android.graphics.Path_Delegate",
          "!url": "http://developer.android.com/reference/android/graphics/Path_Delegate.html#getDelegate(long)"
        },
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "getJavaShape": {
            "!type": "fn() -> +java.awt.Shape",
            "!url": "http://developer.android.com/reference/android/graphics/Path_Delegate.html#getJavaShape()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "transform": {
            "!type": "fn(matrix: +android.graphics.Matrix_Delegate, dst: +android.graphics.Path_Delegate) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Path_Delegate.html#transform(android.graphics.Matrix_Delegate, android.graphics.Path_Delegate)"
          },
          "offset": {
            "!type": "fn(dx: +java.lang.Float, dy: +java.lang.Float, dst: +android.graphics.Path_Delegate) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Path_Delegate.html#offset(float, float, android.graphics.Path_Delegate)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "reset": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Path_Delegate.html#reset()"
          },
          "setPathIterator": {
            "!type": "fn(iterator: +java.awt.geom.PathIterator) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Path_Delegate.html#setPathIterator(java.awt.geom.PathIterator)"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "setJavaShape": {
            "!type": "fn(shape: +java.awt.Shape) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Path_Delegate.html#setJavaShape(java.awt.Shape)"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "Shader_Delegate": {
        "!url": "http://developer.android.com/reference/android/graphics/Shader_Delegate.html",
        "!type": "fn()",
        "getDelegate": {
          "!type": "fn(nativeShader: +java.lang.Long) -> +android.graphics.Shader_Delegate",
          "!url": "http://developer.android.com/reference/android/graphics/Shader_Delegate.html#getDelegate(long)"
        },
        "getTileMode": {
          "!type": "fn(tileMode: number) -> +android.graphics.Shader.TileMode",
          "!url": "http://developer.android.com/reference/android/graphics/Shader_Delegate.html#getTileMode(int)"
        },
        "prototype": {
          "getSupportMessage": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/graphics/Shader_Delegate.html#getSupportMessage()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "isSupported": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Shader_Delegate.html#isSupported()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "getJavaPaint": {
            "!type": "fn() -> +java.awt.Paint",
            "!url": "http://developer.android.com/reference/android/graphics/Shader_Delegate.html#getJavaPaint()"
          }
        }
      },
      "RegionIterator": {
        "!url": "http://developer.android.com/reference/android/graphics/RegionIterator.html",
        "!type": "fn(region: +android.graphics.Region)",
        "prototype": {
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "next": {
            "!type": "fn(r: +android.graphics.Rect) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/RegionIterator.html#next(android.graphics.Rect)"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          }
        }
      },
      "Matrix": {
        "!url": "http://developer.android.com/reference/android/graphics/Matrix.html",
        "!type": "fn()",
        "ScaleToFit": {
          "!url": "http://developer.android.com/reference/android/graphics/Matrix.ScaleToFit.html",
          "FILL": {
            "!type": "+android.graphics.Matrix.ScaleToFit",
            "!url": "http://developer.android.com/reference/android/graphics/Matrix.ScaleToFit.html#FILL"
          },
          "CENTER": {
            "!type": "+android.graphics.Matrix.ScaleToFit",
            "!url": "http://developer.android.com/reference/android/graphics/Matrix.ScaleToFit.html#CENTER"
          },
          "END": {
            "!type": "+android.graphics.Matrix.ScaleToFit",
            "!url": "http://developer.android.com/reference/android/graphics/Matrix.ScaleToFit.html#END"
          },
          "START": {
            "!type": "+android.graphics.Matrix.ScaleToFit",
            "!url": "http://developer.android.com/reference/android/graphics/Matrix.ScaleToFit.html#START"
          },
          "valueOf": {
            "!type": "fn(name: string) -> +android.graphics.Matrix.ScaleToFit",
            "!url": "http://developer.android.com/reference/android/graphics/Matrix.ScaleToFit.html#valueOf(java.lang.String)"
          },
          "values": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/graphics/Matrix.ScaleToFit.html#values()"
          },
          "getSharedConstants": {
            "!type": "fn(enumType: +java.lang.Class) -> +java.newArray",
            "!url": "http://developer.android.com/reference/java/lang/Enum.html#getSharedConstants(java.lang.Class)"
          },
          "prototype": {
            "name": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#name()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#toString()"
            },
            "equals": {
              "!type": "fn(other: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#equals(java.lang.Object)"
            },
            "compareTo": {
              "!type": "fn(o: +java.lang.Enum) -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#compareTo(E)"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "getDeclaringClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#getDeclaringClass()"
            },
            "ordinal": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#ordinal()"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#hashCode()"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            }
          }
        },
        "MTRANS_Y": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Matrix.html#MTRANS_Y"
        },
        "MPERSP_2": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Matrix.html#MPERSP_2"
        },
        "MTRANS_X": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Matrix.html#MTRANS_X"
        },
        "MPERSP_1": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Matrix.html#MPERSP_1"
        },
        "MPERSP_0": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Matrix.html#MPERSP_0"
        },
        "IDENTITY_MATRIX": {
          "!type": "+android.graphics.Matrix",
          "!url": "http://developer.android.com/reference/android/graphics/Matrix.html#IDENTITY_MATRIX"
        },
        "MSCALE_Y": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Matrix.html#MSCALE_Y"
        },
        "MSCALE_X": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Matrix.html#MSCALE_X"
        },
        "MSKEW_Y": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Matrix.html#MSKEW_Y"
        },
        "MSKEW_X": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Matrix.html#MSKEW_X"
        },
        "prototype": {
          "postTranslate": {
            "!type": "fn(dx: +java.lang.Float, dy: +java.lang.Float) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Matrix.html#postTranslate(float, float)"
          },
          "isIdentity": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Matrix.html#isIdentity()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/graphics/Matrix.html#toString()"
          },
          "mapRect": {
            "!type": "fn(dst: +android.graphics.RectF, src: +android.graphics.RectF) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Matrix.html#mapRect(android.graphics.RectF, android.graphics.RectF)"
          },
          "setSkew": {
            "!type": "fn(kx: +java.lang.Float, ky: +java.lang.Float, px: +java.lang.Float, py: +java.lang.Float) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Matrix.html#setSkew(float, float, float, float)"
          },
          "postSkew": {
            "!type": "fn(kx: +java.lang.Float, ky: +java.lang.Float, px: +java.lang.Float, py: +java.lang.Float) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Matrix.html#postSkew(float, float, float, float)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "setRectToRect": {
            "!type": "fn(src: +android.graphics.RectF, dst: +android.graphics.RectF, stf: +android.graphics.Matrix.ScaleToFit) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Matrix.html#setRectToRect(android.graphics.RectF, android.graphics.RectF, android.graphics.Matrix.ScaleToFit)"
          },
          "setConcat": {
            "!type": "fn(a: +android.graphics.Matrix, b: +android.graphics.Matrix) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Matrix.html#setConcat(android.graphics.Matrix, android.graphics.Matrix)"
          },
          "toShortString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/graphics/Matrix.html#toShortString()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Matrix.html#hashCode()"
          },
          "postRotate": {
            "!type": "fn(degrees: +java.lang.Float, px: +java.lang.Float, py: +java.lang.Float) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Matrix.html#postRotate(float, float, float)"
          },
          "setSinCos": {
            "!type": "fn(sinValue: +java.lang.Float, cosValue: +java.lang.Float, px: +java.lang.Float, py: +java.lang.Float) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Matrix.html#setSinCos(float, float, float, float)"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "preRotate": {
            "!type": "fn(degrees: +java.lang.Float, px: +java.lang.Float, py: +java.lang.Float) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Matrix.html#preRotate(float, float, float)"
          },
          "mapVectors": {
            "!type": "fn(dst: +java.newArray, dstIndex: number, src: +java.newArray, srcIndex: number, vectorCount: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Matrix.html#mapVectors(float[], int, float[], int, int)"
          },
          "invert": {
            "!type": "fn(inverse: +android.graphics.Matrix) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Matrix.html#invert(android.graphics.Matrix)"
          },
          "set": {
            "!type": "fn(src: +android.graphics.Matrix) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Matrix.html#set(android.graphics.Matrix)"
          },
          "setScale": {
            "!type": "fn(sx: +java.lang.Float, sy: +java.lang.Float, px: +java.lang.Float, py: +java.lang.Float) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Matrix.html#setScale(float, float, float, float)"
          },
          "mapPoints": {
            "!type": "fn(dst: +java.newArray, dstIndex: number, src: +java.newArray, srcIndex: number, pointCount: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Matrix.html#mapPoints(float[], int, float[], int, int)"
          },
          "preTranslate": {
            "!type": "fn(dx: +java.lang.Float, dy: +java.lang.Float) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Matrix.html#preTranslate(float, float)"
          },
          "getValues": {
            "!type": "fn(values: +java.newArray) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Matrix.html#getValues(float[])"
          },
          "equals": {
            "!type": "fn(obj: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Matrix.html#equals(java.lang.Object)"
          },
          "preScale": {
            "!type": "fn(sx: +java.lang.Float, sy: +java.lang.Float, px: +java.lang.Float, py: +java.lang.Float) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Matrix.html#preScale(float, float, float, float)"
          },
          "mapRadius": {
            "!type": "fn(radius: +java.lang.Float) -> +java.lang.Float",
            "!url": "http://developer.android.com/reference/android/graphics/Matrix.html#mapRadius(float)"
          },
          "setTranslate": {
            "!type": "fn(dx: +java.lang.Float, dy: +java.lang.Float) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Matrix.html#setTranslate(float, float)"
          },
          "setRotate": {
            "!type": "fn(degrees: +java.lang.Float, px: +java.lang.Float, py: +java.lang.Float) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Matrix.html#setRotate(float, float, float)"
          },
          "printShortString": {
            "!type": "fn(pw: +java.io.PrintWriter) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Matrix.html#printShortString(java.io.PrintWriter)"
          },
          "setValues": {
            "!type": "fn(values: +java.newArray) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Matrix.html#setValues(float[])"
          },
          "rectStaysRect": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Matrix.html#rectStaysRect()"
          },
          "reset": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Matrix.html#reset()"
          },
          "setPolyToPoly": {
            "!type": "fn(src: +java.newArray, srcIndex: number, dst: +java.newArray, dstIndex: number, pointCount: number) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Matrix.html#setPolyToPoly(float[], int, float[], int, int)"
          },
          "postConcat": {
            "!type": "fn(other: +android.graphics.Matrix) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Matrix.html#postConcat(android.graphics.Matrix)"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "isAffine": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Matrix.html#isAffine()"
          },
          "preConcat": {
            "!type": "fn(other: +android.graphics.Matrix) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Matrix.html#preConcat(android.graphics.Matrix)"
          },
          "preSkew": {
            "!type": "fn(kx: +java.lang.Float, ky: +java.lang.Float, px: +java.lang.Float, py: +java.lang.Float) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Matrix.html#preSkew(float, float, float, float)"
          },
          "postScale": {
            "!type": "fn(sx: +java.lang.Float, sy: +java.lang.Float, px: +java.lang.Float, py: +java.lang.Float) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Matrix.html#postScale(float, float, float, float)"
          }
        }
      },
      "BitmapFactoryTest": {
        "!url": "http://developer.android.com/reference/android/graphics/BitmapFactoryTest.html",
        "!type": "fn()",
        "prototype": {
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "testBitmapParcelFileDescriptor": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/BitmapFactoryTest.html#testBitmapParcelFileDescriptor()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          }
        }
      },
      "Gradient_Delegate": {
        "!url": "http://developer.android.com/reference/android/graphics/Gradient_Delegate.html",
        "getDelegate": {
          "!type": "fn(nativeShader: +java.lang.Long) -> +android.graphics.Shader_Delegate",
          "!url": "http://developer.android.com/reference/android/graphics/Shader_Delegate.html#getDelegate(long)"
        },
        "getTileMode": {
          "!type": "fn(tileMode: number) -> +android.graphics.Shader.TileMode",
          "!url": "http://developer.android.com/reference/android/graphics/Shader_Delegate.html#getTileMode(int)"
        },
        "prototype": {
          "getSupportMessage": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/graphics/Gradient_Delegate.html#getSupportMessage()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "isSupported": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Gradient_Delegate.html#isSupported()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "getJavaPaint": {
            "!type": "fn() -> +java.awt.Paint",
            "!url": "http://developer.android.com/reference/android/graphics/Shader_Delegate.html#getJavaPaint()"
          }
        }
      },
      "ColorFilter": {
        "!url": "http://developer.android.com/reference/android/graphics/ColorFilter.html",
        "!type": "fn()",
        "prototype": {
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          }
        }
      },
      "Region": {
        "!url": "http://developer.android.com/reference/android/graphics/Region.html",
        "!type": "fn()",
        "Op": {
          "!url": "http://developer.android.com/reference/android/graphics/Region.Op.html",
          "REVERSE_DIFFERENCE": {
            "!type": "+android.graphics.Region.Op",
            "!url": "http://developer.android.com/reference/android/graphics/Region.Op.html#REVERSE_DIFFERENCE"
          },
          "DIFFERENCE": {
            "!type": "+android.graphics.Region.Op",
            "!url": "http://developer.android.com/reference/android/graphics/Region.Op.html#DIFFERENCE"
          },
          "INTERSECT": {
            "!type": "+android.graphics.Region.Op",
            "!url": "http://developer.android.com/reference/android/graphics/Region.Op.html#INTERSECT"
          },
          "UNION": {
            "!type": "+android.graphics.Region.Op",
            "!url": "http://developer.android.com/reference/android/graphics/Region.Op.html#UNION"
          },
          "XOR": {
            "!type": "+android.graphics.Region.Op",
            "!url": "http://developer.android.com/reference/android/graphics/Region.Op.html#XOR"
          },
          "REPLACE": {
            "!type": "+android.graphics.Region.Op",
            "!url": "http://developer.android.com/reference/android/graphics/Region.Op.html#REPLACE"
          },
          "valueOf": {
            "!type": "fn(name: string) -> +android.graphics.Region.Op",
            "!url": "http://developer.android.com/reference/android/graphics/Region.Op.html#valueOf(java.lang.String)"
          },
          "values": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/graphics/Region.Op.html#values()"
          },
          "getSharedConstants": {
            "!type": "fn(enumType: +java.lang.Class) -> +java.newArray",
            "!url": "http://developer.android.com/reference/java/lang/Enum.html#getSharedConstants(java.lang.Class)"
          },
          "prototype": {
            "name": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#name()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#toString()"
            },
            "equals": {
              "!type": "fn(other: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#equals(java.lang.Object)"
            },
            "compareTo": {
              "!type": "fn(o: +java.lang.Enum) -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#compareTo(E)"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "getDeclaringClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#getDeclaringClass()"
            },
            "ordinal": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#ordinal()"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#hashCode()"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            }
          }
        },
        "CREATOR": {
          "!type": "+android.os.Parcelable.Creator",
          "!url": "http://developer.android.com/reference/android/graphics/Region.html#CREATOR"
        },
        "obtain": {
          "!type": "fn() -> +android.graphics.Region",
          "!url": "http://developer.android.com/reference/android/graphics/Region.html#obtain()"
        },
        "prototype": {
          "writeToParcel": {
            "!type": "fn(p: +android.os.Parcel, flags: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Region.html#writeToParcel(android.os.Parcel, int)"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "union": {
            "!type": "fn(r: +android.graphics.Rect) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Region.html#union(android.graphics.Rect)"
          },
          "isRect": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Region.html#isRect()"
          },
          "isComplex": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Region.html#isComplex()"
          },
          "getBounds": {
            "!type": "fn() -> +android.graphics.Rect",
            "!url": "http://developer.android.com/reference/android/graphics/Region.html#getBounds()"
          },
          "contains": {
            "!type": "fn(x: number, y: number) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Region.html#contains(int, int)"
          },
          "op": {
            "!type": "fn(r: +android.graphics.Rect, op: +android.graphics.Region.Op) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Region.html#op(android.graphics.Rect, android.graphics.Region.Op)"
          },
          "describeContents": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Region.html#describeContents()"
          },
          "equals": {
            "!type": "fn(obj: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Region.html#equals(java.lang.Object)"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "translate": {
            "!type": "fn(dx: number, dy: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Region.html#translate(int, int)"
          },
          "set": {
            "!type": "fn(region: +android.graphics.Region) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Region.html#set(android.graphics.Region)"
          },
          "getBoundaryPath": {
            "!type": "fn() -> +android.graphics.Path",
            "!url": "http://developer.android.com/reference/android/graphics/Region.html#getBoundaryPath()"
          },
          "isEmpty": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Region.html#isEmpty()"
          },
          "quickContains": {
            "!type": "fn(r: +android.graphics.Rect) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Region.html#quickContains(android.graphics.Rect)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "quickReject": {
            "!type": "fn(r: +android.graphics.Rect) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Region.html#quickReject(android.graphics.Rect)"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/graphics/Region.html#toString()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "setEmpty": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Region.html#setEmpty()"
          },
          "setPath": {
            "!type": "fn(path: +android.graphics.Path, clip: +android.graphics.Region) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Region.html#setPath(android.graphics.Path, android.graphics.Region)"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "scale": {
            "!type": "fn(scale: +java.lang.Float) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Region.html#scale(float)"
          },
          "recycle": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Region.html#recycle()"
          }
        }
      },
      "BitmapTest": {
        "!url": "http://developer.android.com/reference/android/graphics/BitmapTest.html",
        "!type": "fn()",
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "testBasic": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/BitmapTest.html#testBasic()"
          },
          "testSetPixelsWithAlpha": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/BitmapTest.html#testSetPixelsWithAlpha()"
          },
          "testSetPixelsWithNonOpaqueAlpha": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/BitmapTest.html#testSetPixelsWithNonOpaqueAlpha()"
          },
          "testGetPixelsWithAlpha": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/BitmapTest.html#testGetPixelsWithAlpha()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "testSetPixelsWithoutAlpha": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/BitmapTest.html#testSetPixelsWithoutAlpha()"
          },
          "testGetPixelsWithoutAlpha": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/BitmapTest.html#testGetPixelsWithoutAlpha()"
          },
          "testMutability": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/BitmapTest.html#testMutability()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "PixelXorXfermode_Delegate": {
        "!url": "http://developer.android.com/reference/android/graphics/PixelXorXfermode_Delegate.html",
        "!type": "fn()",
        "getDelegate": {
          "!type": "fn(native_instance: +java.lang.Long) -> +android.graphics.Xfermode_Delegate",
          "!url": "http://developer.android.com/reference/android/graphics/Xfermode_Delegate.html#getDelegate(long)"
        },
        "prototype": {
          "getSupportMessage": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/graphics/PixelXorXfermode_Delegate.html#getSupportMessage()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "isSupported": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/PixelXorXfermode_Delegate.html#isSupported()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "getComposite": {
            "!type": "fn(alpha: number) -> +java.awt.Composite",
            "!url": "http://developer.android.com/reference/android/graphics/PixelXorXfermode_Delegate.html#getComposite(int)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "LinearGradient_Delegate": {
        "!url": "http://developer.android.com/reference/android/graphics/LinearGradient_Delegate.html",
        "getDelegate": {
          "!type": "fn(nativeShader: +java.lang.Long) -> +android.graphics.Shader_Delegate",
          "!url": "http://developer.android.com/reference/android/graphics/Shader_Delegate.html#getDelegate(long)"
        },
        "getTileMode": {
          "!type": "fn(tileMode: number) -> +android.graphics.Shader.TileMode",
          "!url": "http://developer.android.com/reference/android/graphics/Shader_Delegate.html#getTileMode(int)"
        },
        "prototype": {
          "getSupportMessage": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/graphics/Gradient_Delegate.html#getSupportMessage()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "isSupported": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Gradient_Delegate.html#isSupported()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "getJavaPaint": {
            "!type": "fn() -> +java.awt.Paint",
            "!url": "http://developer.android.com/reference/android/graphics/LinearGradient_Delegate.html#getJavaPaint()"
          }
        }
      },
      "Xfermode_Delegate": {
        "!url": "http://developer.android.com/reference/android/graphics/Xfermode_Delegate.html",
        "!type": "fn()",
        "getDelegate": {
          "!type": "fn(native_instance: +java.lang.Long) -> +android.graphics.Xfermode_Delegate",
          "!url": "http://developer.android.com/reference/android/graphics/Xfermode_Delegate.html#getDelegate(long)"
        },
        "prototype": {
          "getSupportMessage": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/graphics/Xfermode_Delegate.html#getSupportMessage()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "isSupported": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Xfermode_Delegate.html#isSupported()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "getComposite": {
            "!type": "fn(alpha: number) -> +java.awt.Composite",
            "!url": "http://developer.android.com/reference/android/graphics/Xfermode_Delegate.html#getComposite(int)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "SurfaceTexture": {
        "!url": "http://developer.android.com/reference/android/graphics/SurfaceTexture.html",
        "!type": "fn(texName: number)",
        "OutOfResourcesException": {
          "!url": "http://developer.android.com/reference/android/graphics/SurfaceTexture.OutOfResourcesException.html",
          "!type": "fn()",
          "prototype": {
            "initCause": {
              "!type": "fn(throwable: +java.lang.Throwable) -> +java.lang.Throwable",
              "!url": "http://developer.android.com/reference/java/lang/Throwable.html#initCause(java.lang.Throwable)"
            },
            "getLocalizedMessage": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Throwable.html#getLocalizedMessage()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "equals": {
              "!type": "fn(o: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Throwable.html#toString()"
            },
            "getStackTrace": {
              "!type": "fn() -> +java.newArray",
              "!url": "http://developer.android.com/reference/java/lang/Throwable.html#getStackTrace()"
            },
            "printStackTrace": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Throwable.html#printStackTrace()"
            },
            "addSuppressed": {
              "!type": "fn(throwable: +java.lang.Throwable) -> void",
              "!url": "http://developer.android.com/reference/java/lang/Throwable.html#addSuppressed(java.lang.Throwable)"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "fillInStackTrace": {
              "!type": "fn() -> +java.lang.Throwable",
              "!url": "http://developer.android.com/reference/java/lang/Throwable.html#fillInStackTrace()"
            },
            "setStackTrace": {
              "!type": "fn(trace: +java.newArray) -> void",
              "!url": "http://developer.android.com/reference/java/lang/Throwable.html#setStackTrace(java.lang.StackTraceElement[])"
            },
            "getSuppressed": {
              "!type": "fn() -> +java.newArray",
              "!url": "http://developer.android.com/reference/java/lang/Throwable.html#getSuppressed()"
            },
            "getCause": {
              "!type": "fn() -> +java.lang.Throwable",
              "!url": "http://developer.android.com/reference/java/lang/Throwable.html#getCause()"
            },
            "getMessage": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Throwable.html#getMessage()"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            }
          }
        },
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "getTimestamp": {
            "!type": "fn() -> +java.lang.Long",
            "!url": "http://developer.android.com/reference/android/graphics/SurfaceTexture.html#getTimestamp()"
          },
          "setOnFrameAvailableListener": {
            "!type": "fn(listener: +android.graphics.SurfaceTexture.OnFrameAvailableListener) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/SurfaceTexture.html#setOnFrameAvailableListener(android.graphics.SurfaceTexture.OnFrameAvailableListener)"
          },
          "setDefaultBufferSize": {
            "!type": "fn(width: number, height: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/SurfaceTexture.html#setDefaultBufferSize(int, int)"
          },
          "getTransformMatrix": {
            "!type": "fn(mtx: +java.newArray) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/SurfaceTexture.html#getTransformMatrix(float[])"
          },
          "detachFromGLContext": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/SurfaceTexture.html#detachFromGLContext()"
          },
          "attachToGLContext": {
            "!type": "fn(texName: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/SurfaceTexture.html#attachToGLContext(int)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "isReleased": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/SurfaceTexture.html#isReleased()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "release": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/SurfaceTexture.html#release()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "releaseTexImage": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/SurfaceTexture.html#releaseTexImage()"
          },
          "updateTexImage": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/SurfaceTexture.html#updateTexImage()"
          }
        }
      },
      "CornerPathEffect_Delegate": {
        "!url": "http://developer.android.com/reference/android/graphics/CornerPathEffect_Delegate.html",
        "!type": "fn()",
        "getDelegate": {
          "!type": "fn(nativeShader: +java.lang.Long) -> +android.graphics.PathEffect_Delegate",
          "!url": "http://developer.android.com/reference/android/graphics/PathEffect_Delegate.html#getDelegate(long)"
        },
        "prototype": {
          "getSupportMessage": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/graphics/CornerPathEffect_Delegate.html#getSupportMessage()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "isSupported": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/CornerPathEffect_Delegate.html#isSupported()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "getStroke": {
            "!type": "fn(paint: +android.graphics.Paint_Delegate) -> +java.awt.Stroke",
            "!url": "http://developer.android.com/reference/android/graphics/CornerPathEffect_Delegate.html#getStroke(android.graphics.Paint_Delegate)"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "PointF": {
        "!url": "http://developer.android.com/reference/android/graphics/PointF.html",
        "!type": "fn()",
        "CREATOR": {
          "!type": "+android.os.Parcelable.Creator",
          "!url": "http://developer.android.com/reference/android/graphics/PointF.html#CREATOR"
        },
        "length": {
          "!type": "fn(x: +java.lang.Float, y: +java.lang.Float) -> +java.lang.Float",
          "!url": "http://developer.android.com/reference/android/graphics/PointF.html#length(float, float)"
        },
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/graphics/PointF.html#toString()"
          },
          "equals": {
            "!type": "fn(x: +java.lang.Float, y: +java.lang.Float) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/PointF.html#equals(float, float)"
          },
          "length": {
            "!type": "fn() -> +java.lang.Float",
            "!url": "http://developer.android.com/reference/android/graphics/PointF.html#length()"
          },
          "describeContents": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/PointF.html#describeContents()"
          },
          "offset": {
            "!type": "fn(dx: +java.lang.Float, dy: +java.lang.Float) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/PointF.html#offset(float, float)"
          },
          "negate": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/PointF.html#negate()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "writeToParcel": {
            "!type": "fn(out: +android.os.Parcel, flags: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/PointF.html#writeToParcel(android.os.Parcel, int)"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/PointF.html#hashCode()"
          },
          "set": {
            "!type": "fn(x: +java.lang.Float, y: +java.lang.Float) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/PointF.html#set(float, float)"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "readFromParcel": {
            "!type": "fn(in: +android.os.Parcel) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/PointF.html#readFromParcel(android.os.Parcel)"
          }
        }
      },
      "LargeBitmap": {
        "!url": "http://developer.android.com/reference/android/graphics/LargeBitmap.html",
        "prototype": {
          "isRecycled": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/LargeBitmap.html#isRecycled()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "recycle": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/LargeBitmap.html#recycle()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "getHeight": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/LargeBitmap.html#getHeight()"
          },
          "decodeRegion": {
            "!type": "fn(rect: +android.graphics.Rect, options: +android.graphics.BitmapFactory.Options) -> +android.graphics.Bitmap",
            "!url": "http://developer.android.com/reference/android/graphics/LargeBitmap.html#decodeRegion(android.graphics.Rect, android.graphics.BitmapFactory.Options)"
          },
          "getWidth": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/LargeBitmap.html#getWidth()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "Matrix_DelegateTest": {
        "!url": "http://developer.android.com/reference/android/graphics/Matrix_DelegateTest.html",
        "!type": "fn()",
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "testCopyConstructor": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Matrix_DelegateTest.html#testCopyConstructor()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "testIdentity": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Matrix_DelegateTest.html#testIdentity()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "FontListParser": {
        "!url": "http://developer.android.com/reference/android/graphics/FontListParser.html",
        "!type": "fn()",
        "Config": {
          "!url": "http://developer.android.com/reference/android/graphics/FontListParser.Config.html",
          "prototype": {
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "equals": {
              "!type": "fn(o: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
            }
          }
        },
        "Font": {
          "!url": "http://developer.android.com/reference/android/graphics/FontListParser.Font.html",
          "prototype": {
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "equals": {
              "!type": "fn(o: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
            }
          }
        },
        "Alias": {
          "!url": "http://developer.android.com/reference/android/graphics/FontListParser.Alias.html",
          "!type": "fn()",
          "prototype": {
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "equals": {
              "!type": "fn(o: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
            }
          }
        },
        "Family": {
          "!url": "http://developer.android.com/reference/android/graphics/FontListParser.Family.html",
          "!type": "fn(name: string, fonts: +java.util.List, lang: string, variant: string)",
          "prototype": {
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "equals": {
              "!type": "fn(o: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
            }
          }
        },
        "parse": {
          "!type": "fn(in: +java.io.InputStream) -> +android.graphics.FontListParser.Config",
          "!url": "http://developer.android.com/reference/android/graphics/FontListParser.html#parse(java.io.InputStream)"
        },
        "prototype": {
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          }
        }
      },
      "PorterDuffColorFilter_Delegate": {
        "!url": "http://developer.android.com/reference/android/graphics/PorterDuffColorFilter_Delegate.html",
        "getDelegate": {
          "!type": "fn(nativeShader: +java.lang.Long) -> +android.graphics.ColorFilter_Delegate",
          "!url": "http://developer.android.com/reference/android/graphics/ColorFilter_Delegate.html#getDelegate(long)"
        },
        "prototype": {
          "getSupportMessage": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/graphics/PorterDuffColorFilter_Delegate.html#getSupportMessage()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "isSupported": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/PorterDuffColorFilter_Delegate.html#isSupported()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "applyFilter": {
            "!type": "fn(g: +java.awt.Graphics2D, width: number, height: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/PorterDuffColorFilter_Delegate.html#applyFilter(java.awt.Graphics2D, int, int)"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "PaintFlagsDrawFilter_Delegate": {
        "!url": "http://developer.android.com/reference/android/graphics/PaintFlagsDrawFilter_Delegate.html",
        "!type": "fn()",
        "getDelegate": {
          "!type": "fn(nativeDrawFilter: +java.lang.Long) -> +android.graphics.DrawFilter_Delegate",
          "!url": "http://developer.android.com/reference/android/graphics/DrawFilter_Delegate.html#getDelegate(long)"
        },
        "prototype": {
          "getSupportMessage": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/graphics/PaintFlagsDrawFilter_Delegate.html#getSupportMessage()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "isSupported": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/PaintFlagsDrawFilter_Delegate.html#isSupported()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "Path": {
        "!url": "http://developer.android.com/reference/android/graphics/Path.html",
        "!type": "fn()",
        "Op": {
          "!url": "http://developer.android.com/reference/android/graphics/Path.Op.html",
          "REVERSE_DIFFERENCE": {
            "!type": "+android.graphics.Path.Op",
            "!url": "http://developer.android.com/reference/android/graphics/Path.Op.html#REVERSE_DIFFERENCE"
          },
          "DIFFERENCE": {
            "!type": "+android.graphics.Path.Op",
            "!url": "http://developer.android.com/reference/android/graphics/Path.Op.html#DIFFERENCE"
          },
          "INTERSECT": {
            "!type": "+android.graphics.Path.Op",
            "!url": "http://developer.android.com/reference/android/graphics/Path.Op.html#INTERSECT"
          },
          "UNION": {
            "!type": "+android.graphics.Path.Op",
            "!url": "http://developer.android.com/reference/android/graphics/Path.Op.html#UNION"
          },
          "XOR": {
            "!type": "+android.graphics.Path.Op",
            "!url": "http://developer.android.com/reference/android/graphics/Path.Op.html#XOR"
          },
          "valueOf": {
            "!type": "fn(name: string) -> +android.graphics.Path.Op",
            "!url": "http://developer.android.com/reference/android/graphics/Path.Op.html#valueOf(java.lang.String)"
          },
          "values": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/graphics/Path.Op.html#values()"
          },
          "getSharedConstants": {
            "!type": "fn(enumType: +java.lang.Class) -> +java.newArray",
            "!url": "http://developer.android.com/reference/java/lang/Enum.html#getSharedConstants(java.lang.Class)"
          },
          "prototype": {
            "name": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#name()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#toString()"
            },
            "equals": {
              "!type": "fn(other: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#equals(java.lang.Object)"
            },
            "compareTo": {
              "!type": "fn(o: +java.lang.Enum) -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#compareTo(E)"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "getDeclaringClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#getDeclaringClass()"
            },
            "ordinal": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#ordinal()"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#hashCode()"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            }
          }
        },
        "FillType": {
          "!url": "http://developer.android.com/reference/android/graphics/Path.FillType.html",
          "EVEN_ODD": {
            "!type": "+android.graphics.Path.FillType",
            "!url": "http://developer.android.com/reference/android/graphics/Path.FillType.html#EVEN_ODD"
          },
          "INVERSE_WINDING": {
            "!type": "+android.graphics.Path.FillType",
            "!url": "http://developer.android.com/reference/android/graphics/Path.FillType.html#INVERSE_WINDING"
          },
          "INVERSE_EVEN_ODD": {
            "!type": "+android.graphics.Path.FillType",
            "!url": "http://developer.android.com/reference/android/graphics/Path.FillType.html#INVERSE_EVEN_ODD"
          },
          "WINDING": {
            "!type": "+android.graphics.Path.FillType",
            "!url": "http://developer.android.com/reference/android/graphics/Path.FillType.html#WINDING"
          },
          "valueOf": {
            "!type": "fn(name: string) -> +android.graphics.Path.FillType",
            "!url": "http://developer.android.com/reference/android/graphics/Path.FillType.html#valueOf(java.lang.String)"
          },
          "values": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/graphics/Path.FillType.html#values()"
          },
          "getSharedConstants": {
            "!type": "fn(enumType: +java.lang.Class) -> +java.newArray",
            "!url": "http://developer.android.com/reference/java/lang/Enum.html#getSharedConstants(java.lang.Class)"
          },
          "prototype": {
            "name": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#name()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#toString()"
            },
            "equals": {
              "!type": "fn(other: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#equals(java.lang.Object)"
            },
            "compareTo": {
              "!type": "fn(o: +java.lang.Enum) -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#compareTo(E)"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "getDeclaringClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#getDeclaringClass()"
            },
            "ordinal": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#ordinal()"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#hashCode()"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            }
          }
        },
        "Direction": {
          "!url": "http://developer.android.com/reference/android/graphics/Path.Direction.html",
          "CW": {
            "!type": "+android.graphics.Path.Direction",
            "!url": "http://developer.android.com/reference/android/graphics/Path.Direction.html#CW"
          },
          "CCW": {
            "!type": "+android.graphics.Path.Direction",
            "!url": "http://developer.android.com/reference/android/graphics/Path.Direction.html#CCW"
          },
          "valueOf": {
            "!type": "fn(name: string) -> +android.graphics.Path.Direction",
            "!url": "http://developer.android.com/reference/android/graphics/Path.Direction.html#valueOf(java.lang.String)"
          },
          "values": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/graphics/Path.Direction.html#values()"
          },
          "getSharedConstants": {
            "!type": "fn(enumType: +java.lang.Class) -> +java.newArray",
            "!url": "http://developer.android.com/reference/java/lang/Enum.html#getSharedConstants(java.lang.Class)"
          },
          "prototype": {
            "name": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#name()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#toString()"
            },
            "equals": {
              "!type": "fn(other: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#equals(java.lang.Object)"
            },
            "compareTo": {
              "!type": "fn(o: +java.lang.Enum) -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#compareTo(E)"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "getDeclaringClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#getDeclaringClass()"
            },
            "ordinal": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#ordinal()"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#hashCode()"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            }
          }
        },
        "prototype": {
          "moveTo": {
            "!type": "fn(x: +java.lang.Float, y: +java.lang.Float) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Path.html#moveTo(float, float)"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "addPath": {
            "!type": "fn(src: +android.graphics.Path, dx: +java.lang.Float, dy: +java.lang.Float) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Path.html#addPath(android.graphics.Path, float, float)"
          },
          "getFillType": {
            "!type": "fn() -> +android.graphics.Path.FillType",
            "!url": "http://developer.android.com/reference/android/graphics/Path.html#getFillType()"
          },
          "isRect": {
            "!type": "fn(rect: +android.graphics.RectF) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Path.html#isRect(android.graphics.RectF)"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "arcTo": {
            "!type": "fn(oval: +android.graphics.RectF, startAngle: +java.lang.Float, sweepAngle: +java.lang.Float, forceMoveTo: bool) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Path.html#arcTo(android.graphics.RectF, float, float, boolean)"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "addCircle": {
            "!type": "fn(x: +java.lang.Float, y: +java.lang.Float, radius: +java.lang.Float, dir: +android.graphics.Path.Direction) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Path.html#addCircle(float, float, float, android.graphics.Path.Direction)"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "approximate": {
            "!type": "fn(acceptableError: +java.lang.Float) -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/graphics/Path.html#approximate(float)"
          },
          "isEmpty": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Path.html#isEmpty()"
          },
          "computeBounds": {
            "!type": "fn(bounds: +android.graphics.RectF, exact: bool) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Path.html#computeBounds(android.graphics.RectF, boolean)"
          },
          "setFillType": {
            "!type": "fn(ft: +android.graphics.Path.FillType) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Path.html#setFillType(android.graphics.Path.FillType)"
          },
          "addRoundRect": {
            "!type": "fn(rect: +android.graphics.RectF, rx: +java.lang.Float, ry: +java.lang.Float, dir: +android.graphics.Path.Direction) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Path.html#addRoundRect(android.graphics.RectF, float, float, android.graphics.Path.Direction)"
          },
          "addOval": {
            "!type": "fn(oval: +android.graphics.RectF, dir: +android.graphics.Path.Direction) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Path.html#addOval(android.graphics.RectF, android.graphics.Path.Direction)"
          },
          "set": {
            "!type": "fn(src: +android.graphics.Path) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Path.html#set(android.graphics.Path)"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "transform": {
            "!type": "fn(matrix: +android.graphics.Matrix, dst: +android.graphics.Path) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Path.html#transform(android.graphics.Matrix, android.graphics.Path)"
          },
          "op": {
            "!type": "fn(path: +android.graphics.Path, op: +android.graphics.Path.Op) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Path.html#op(android.graphics.Path, android.graphics.Path.Op)"
          },
          "rLineTo": {
            "!type": "fn(dx: +java.lang.Float, dy: +java.lang.Float) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Path.html#rLineTo(float, float)"
          },
          "setLastPoint": {
            "!type": "fn(dx: +java.lang.Float, dy: +java.lang.Float) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Path.html#setLastPoint(float, float)"
          },
          "rCubicTo": {
            "!type": "fn(x1: +java.lang.Float, y1: +java.lang.Float, x2: +java.lang.Float, y2: +java.lang.Float, x3: +java.lang.Float, y3: +java.lang.Float) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Path.html#rCubicTo(float, float, float, float, float, float)"
          },
          "rQuadTo": {
            "!type": "fn(dx1: +java.lang.Float, dy1: +java.lang.Float, dx2: +java.lang.Float, dy2: +java.lang.Float) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Path.html#rQuadTo(float, float, float, float)"
          },
          "toggleInverseFillType": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Path.html#toggleInverseFillType()"
          },
          "offset": {
            "!type": "fn(dx: +java.lang.Float, dy: +java.lang.Float, dst: +android.graphics.Path) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Path.html#offset(float, float, android.graphics.Path)"
          },
          "isInverseFillType": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Path.html#isInverseFillType()"
          },
          "reset": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Path.html#reset()"
          },
          "close": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Path.html#close()"
          },
          "rMoveTo": {
            "!type": "fn(dx: +java.lang.Float, dy: +java.lang.Float) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Path.html#rMoveTo(float, float)"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "cubicTo": {
            "!type": "fn(x1: +java.lang.Float, y1: +java.lang.Float, x2: +java.lang.Float, y2: +java.lang.Float, x3: +java.lang.Float, y3: +java.lang.Float) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Path.html#cubicTo(float, float, float, float, float, float)"
          },
          "lineTo": {
            "!type": "fn(x: +java.lang.Float, y: +java.lang.Float) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Path.html#lineTo(float, float)"
          },
          "addRect": {
            "!type": "fn(rect: +android.graphics.RectF, dir: +android.graphics.Path.Direction) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Path.html#addRect(android.graphics.RectF, android.graphics.Path.Direction)"
          },
          "rewind": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Path.html#rewind()"
          },
          "quadTo": {
            "!type": "fn(x1: +java.lang.Float, y1: +java.lang.Float, x2: +java.lang.Float, y2: +java.lang.Float) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Path.html#quadTo(float, float, float, float)"
          },
          "incReserve": {
            "!type": "fn(extraPtCount: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Path.html#incReserve(int)"
          },
          "isConvex": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Path.html#isConvex()"
          },
          "addArc": {
            "!type": "fn(oval: +android.graphics.RectF, startAngle: +java.lang.Float, sweepAngle: +java.lang.Float) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Path.html#addArc(android.graphics.RectF, float, float)"
          }
        }
      },
      "PathEffect": {
        "!url": "http://developer.android.com/reference/android/graphics/PathEffect.html",
        "!type": "fn()",
        "prototype": {
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          }
        }
      },
      "Matrix_Delegate": {
        "!url": "http://developer.android.com/reference/android/graphics/Matrix_Delegate.html",
        "getDelegate": {
          "!type": "fn(native_instance: +java.lang.Long) -> +android.graphics.Matrix_Delegate",
          "!url": "http://developer.android.com/reference/android/graphics/Matrix_Delegate.html#getDelegate(long)"
        },
        "make": {
          "!type": "fn(matrix: +java.awt.geom.AffineTransform) -> +android.graphics.Matrix_Delegate",
          "!url": "http://developer.android.com/reference/android/graphics/Matrix_Delegate.html#make(java.awt.geom.AffineTransform)"
        },
        "makeValues": {
          "!type": "fn(matrix: +java.awt.geom.AffineTransform) -> +java.newArray",
          "!url": "http://developer.android.com/reference/android/graphics/Matrix_Delegate.html#makeValues(java.awt.geom.AffineTransform)"
        },
        "getAffineTransform": {
          "!type": "fn(m: +android.graphics.Matrix) -> +java.awt.geom.AffineTransform",
          "!url": "http://developer.android.com/reference/android/graphics/Matrix_Delegate.html#getAffineTransform(android.graphics.Matrix)"
        },
        "hasPerspective": {
          "!type": "fn(m: +android.graphics.Matrix) -> bool",
          "!url": "http://developer.android.com/reference/android/graphics/Matrix_Delegate.html#hasPerspective(android.graphics.Matrix)"
        },
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "getAffineTransform": {
            "!type": "fn() -> +java.awt.geom.AffineTransform",
            "!url": "http://developer.android.com/reference/android/graphics/Matrix_Delegate.html#getAffineTransform()"
          },
          "mapRect": {
            "!type": "fn(dst: +android.graphics.RectF, src: +android.graphics.RectF) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Matrix_Delegate.html#mapRect(android.graphics.RectF, android.graphics.RectF)"
          },
          "hasPerspective": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Matrix_Delegate.html#hasPerspective()"
          },
          "isIdentity": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Matrix_Delegate.html#isIdentity()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "reset": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Matrix_Delegate.html#reset()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "set": {
            "!type": "fn(matrix: +android.graphics.Matrix_Delegate) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Matrix_Delegate.html#set(android.graphics.Matrix_Delegate)"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "Paint": {
        "!url": "http://developer.android.com/reference/android/graphics/Paint.html",
        "!type": "fn()",
        "Style": {
          "!url": "http://developer.android.com/reference/android/graphics/Paint.Style.html",
          "FILL": {
            "!type": "+android.graphics.Paint.Style",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.Style.html#FILL"
          },
          "FILL_AND_STROKE": {
            "!type": "+android.graphics.Paint.Style",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.Style.html#FILL_AND_STROKE"
          },
          "STROKE": {
            "!type": "+android.graphics.Paint.Style",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.Style.html#STROKE"
          },
          "valueOf": {
            "!type": "fn(name: string) -> +android.graphics.Paint.Style",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.Style.html#valueOf(java.lang.String)"
          },
          "values": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.Style.html#values()"
          },
          "getSharedConstants": {
            "!type": "fn(enumType: +java.lang.Class) -> +java.newArray",
            "!url": "http://developer.android.com/reference/java/lang/Enum.html#getSharedConstants(java.lang.Class)"
          },
          "prototype": {
            "name": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#name()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#toString()"
            },
            "equals": {
              "!type": "fn(other: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#equals(java.lang.Object)"
            },
            "compareTo": {
              "!type": "fn(o: +java.lang.Enum) -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#compareTo(E)"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "getDeclaringClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#getDeclaringClass()"
            },
            "ordinal": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#ordinal()"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#hashCode()"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            }
          }
        },
        "Cap": {
          "!url": "http://developer.android.com/reference/android/graphics/Paint.Cap.html",
          "ROUND": {
            "!type": "+android.graphics.Paint.Cap",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.Cap.html#ROUND"
          },
          "SQUARE": {
            "!type": "+android.graphics.Paint.Cap",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.Cap.html#SQUARE"
          },
          "BUTT": {
            "!type": "+android.graphics.Paint.Cap",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.Cap.html#BUTT"
          },
          "valueOf": {
            "!type": "fn(name: string) -> +android.graphics.Paint.Cap",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.Cap.html#valueOf(java.lang.String)"
          },
          "values": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.Cap.html#values()"
          },
          "getSharedConstants": {
            "!type": "fn(enumType: +java.lang.Class) -> +java.newArray",
            "!url": "http://developer.android.com/reference/java/lang/Enum.html#getSharedConstants(java.lang.Class)"
          },
          "prototype": {
            "name": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#name()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#toString()"
            },
            "equals": {
              "!type": "fn(other: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#equals(java.lang.Object)"
            },
            "compareTo": {
              "!type": "fn(o: +java.lang.Enum) -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#compareTo(E)"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "getDeclaringClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#getDeclaringClass()"
            },
            "ordinal": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#ordinal()"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#hashCode()"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            }
          }
        },
        "Join": {
          "!url": "http://developer.android.com/reference/android/graphics/Paint.Join.html",
          "ROUND": {
            "!type": "+android.graphics.Paint.Join",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.Join.html#ROUND"
          },
          "BEVEL": {
            "!type": "+android.graphics.Paint.Join",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.Join.html#BEVEL"
          },
          "MITER": {
            "!type": "+android.graphics.Paint.Join",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.Join.html#MITER"
          },
          "valueOf": {
            "!type": "fn(name: string) -> +android.graphics.Paint.Join",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.Join.html#valueOf(java.lang.String)"
          },
          "values": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.Join.html#values()"
          },
          "getSharedConstants": {
            "!type": "fn(enumType: +java.lang.Class) -> +java.newArray",
            "!url": "http://developer.android.com/reference/java/lang/Enum.html#getSharedConstants(java.lang.Class)"
          },
          "prototype": {
            "name": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#name()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#toString()"
            },
            "equals": {
              "!type": "fn(other: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#equals(java.lang.Object)"
            },
            "compareTo": {
              "!type": "fn(o: +java.lang.Enum) -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#compareTo(E)"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "getDeclaringClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#getDeclaringClass()"
            },
            "ordinal": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#ordinal()"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#hashCode()"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            }
          }
        },
        "Align": {
          "!url": "http://developer.android.com/reference/android/graphics/Paint.Align.html",
          "LEFT": {
            "!type": "+android.graphics.Paint.Align",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.Align.html#LEFT"
          },
          "RIGHT": {
            "!type": "+android.graphics.Paint.Align",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.Align.html#RIGHT"
          },
          "CENTER": {
            "!type": "+android.graphics.Paint.Align",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.Align.html#CENTER"
          },
          "valueOf": {
            "!type": "fn(name: string) -> +android.graphics.Paint.Align",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.Align.html#valueOf(java.lang.String)"
          },
          "values": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.Align.html#values()"
          },
          "getSharedConstants": {
            "!type": "fn(enumType: +java.lang.Class) -> +java.newArray",
            "!url": "http://developer.android.com/reference/java/lang/Enum.html#getSharedConstants(java.lang.Class)"
          },
          "prototype": {
            "name": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#name()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#toString()"
            },
            "equals": {
              "!type": "fn(other: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#equals(java.lang.Object)"
            },
            "compareTo": {
              "!type": "fn(o: +java.lang.Enum) -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#compareTo(E)"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "getDeclaringClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#getDeclaringClass()"
            },
            "ordinal": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#ordinal()"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#hashCode()"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            }
          }
        },
        "FontMetrics": {
          "!url": "http://developer.android.com/reference/android/graphics/Paint.FontMetrics.html",
          "!type": "fn()",
          "prototype": {
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "equals": {
              "!type": "fn(o: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
            }
          }
        },
        "FontMetricsInt": {
          "!url": "http://developer.android.com/reference/android/graphics/Paint.FontMetricsInt.html",
          "!type": "fn()",
          "prototype": {
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "equals": {
              "!type": "fn(o: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/android/graphics/Paint.FontMetricsInt.html#toString()"
            }
          }
        },
        "BIDI_FORCE_RTL": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Paint.html#BIDI_FORCE_RTL"
        },
        "EMBEDDED_BITMAP_TEXT_FLAG": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Paint.html#EMBEDDED_BITMAP_TEXT_FLAG"
        },
        "DIRECTION_LTR": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Paint.html#DIRECTION_LTR"
        },
        "FAKE_BOLD_TEXT_FLAG": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Paint.html#FAKE_BOLD_TEXT_FLAG"
        },
        "CURSOR_AT": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Paint.html#CURSOR_AT"
        },
        "VERTICAL_TEXT_FLAG": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Paint.html#VERTICAL_TEXT_FLAG"
        },
        "HINTING_ON": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Paint.html#HINTING_ON"
        },
        "CURSOR_BEFORE": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Paint.html#CURSOR_BEFORE"
        },
        "BIDI_RTL": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Paint.html#BIDI_RTL"
        },
        "DEV_KERN_TEXT_FLAG": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Paint.html#DEV_KERN_TEXT_FLAG"
        },
        "UNDERLINE_TEXT_FLAG": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Paint.html#UNDERLINE_TEXT_FLAG"
        },
        "BIDI_DEFAULT_LTR": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Paint.html#BIDI_DEFAULT_LTR"
        },
        "ANTI_ALIAS_FLAG": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Paint.html#ANTI_ALIAS_FLAG"
        },
        "LINEAR_TEXT_FLAG": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Paint.html#LINEAR_TEXT_FLAG"
        },
        "CURSOR_AT_OR_BEFORE": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Paint.html#CURSOR_AT_OR_BEFORE"
        },
        "LCD_RENDER_TEXT_FLAG": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Paint.html#LCD_RENDER_TEXT_FLAG"
        },
        "DIRECTION_RTL": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Paint.html#DIRECTION_RTL"
        },
        "BIDI_FORCE_LTR": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Paint.html#BIDI_FORCE_LTR"
        },
        "STRIKE_THRU_TEXT_FLAG": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Paint.html#STRIKE_THRU_TEXT_FLAG"
        },
        "CURSOR_AFTER": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Paint.html#CURSOR_AFTER"
        },
        "HINTING_OFF": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Paint.html#HINTING_OFF"
        },
        "AUTO_HINTING_TEXT_FLAG": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Paint.html#AUTO_HINTING_TEXT_FLAG"
        },
        "FILTER_BITMAP_FLAG": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Paint.html#FILTER_BITMAP_FLAG"
        },
        "CURSOR_AT_OR_AFTER": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Paint.html#CURSOR_AT_OR_AFTER"
        },
        "SUBPIXEL_TEXT_FLAG": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Paint.html#SUBPIXEL_TEXT_FLAG"
        },
        "DITHER_FLAG": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Paint.html#DITHER_FLAG"
        },
        "BIDI_DEFAULT_RTL": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Paint.html#BIDI_DEFAULT_RTL"
        },
        "BIDI_LTR": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Paint.html#BIDI_LTR"
        },
        "prototype": {
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "setHyphenEdit": {
            "!type": "fn(hyphen: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#setHyphenEdit(int)"
          },
          "getTextSize": {
            "!type": "fn() -> +java.lang.Float",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#getTextSize()"
          },
          "setFlags": {
            "!type": "fn(flags: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#setFlags(int)"
          },
          "getTextAlign": {
            "!type": "fn() -> +android.graphics.Paint.Align",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#getTextAlign()"
          },
          "setColor": {
            "!type": "fn(color: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#setColor(int)"
          },
          "hasGlyph": {
            "!type": "fn(string: string) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#hasGlyph(java.lang.String)"
          },
          "setStrokeWidth": {
            "!type": "fn(width: +java.lang.Float) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#setStrokeWidth(float)"
          },
          "getTextRunCursor": {
            "!type": "fn(text: +java.newArray, contextStart: number, contextLength: number, dir: number, offset: number, cursorOpt: number) -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#getTextRunCursor(char[], int, int, int, int, int)"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "setShader": {
            "!type": "fn(shader: +android.graphics.Shader) -> +android.graphics.Shader",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#setShader(android.graphics.Shader)"
          },
          "getTextLocale": {
            "!type": "fn() -> +java.util.Locale",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#getTextLocale()"
          },
          "setTextLocale": {
            "!type": "fn(locale: +java.util.Locale) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#setTextLocale(java.util.Locale)"
          },
          "setTextSkewX": {
            "!type": "fn(skewX: +java.lang.Float) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#setTextSkewX(float)"
          },
          "setSubpixelText": {
            "!type": "fn(subpixelText: bool) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#setSubpixelText(boolean)"
          },
          "getFontFeatureSettings": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#getFontFeatureSettings()"
          },
          "isDither": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#isDither()"
          },
          "getHyphenEdit": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#getHyphenEdit()"
          },
          "setTextScaleX": {
            "!type": "fn(scaleX: +java.lang.Float) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#setTextScaleX(float)"
          },
          "getHinting": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#getHinting()"
          },
          "getStrokeWidth": {
            "!type": "fn() -> +java.lang.Float",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#getStrokeWidth()"
          },
          "getTextPath": {
            "!type": "fn(text: +java.newArray, index: number, count: number, x: +java.lang.Float, y: +java.lang.Float, path: +android.graphics.Path) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#getTextPath(char[], int, int, float, float, android.graphics.Path)"
          },
          "setAntiAlias": {
            "!type": "fn(aa: bool) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#setAntiAlias(boolean)"
          },
          "setFilterBitmap": {
            "!type": "fn(filter: bool) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#setFilterBitmap(boolean)"
          },
          "setShadowLayer": {
            "!type": "fn(radius: +java.lang.Float, dx: +java.lang.Float, dy: +java.lang.Float, shadowColor: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#setShadowLayer(float, float, float, int)"
          },
          "descent": {
            "!type": "fn() -> +java.lang.Float",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#descent()"
          },
          "getPathEffect": {
            "!type": "fn() -> +android.graphics.PathEffect",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#getPathEffect()"
          },
          "clearShadowLayer": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#clearShadowLayer()"
          },
          "getXfermode": {
            "!type": "fn() -> +android.graphics.Xfermode",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#getXfermode()"
          },
          "getTextScaleX": {
            "!type": "fn() -> +java.lang.Float",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#getTextScaleX()"
          },
          "setPathEffect": {
            "!type": "fn(effect: +android.graphics.PathEffect) -> +android.graphics.PathEffect",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#setPathEffect(android.graphics.PathEffect)"
          },
          "isFilterBitmap": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#isFilterBitmap()"
          },
          "getTextSkewX": {
            "!type": "fn() -> +java.lang.Float",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#getTextSkewX()"
          },
          "hasShadowLayer": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#hasShadowLayer()"
          },
          "setTypeface": {
            "!type": "fn(typeface: +android.graphics.Typeface) -> +android.graphics.Typeface",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#setTypeface(android.graphics.Typeface)"
          },
          "isSubpixelText": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#isSubpixelText()"
          },
          "getTextRunAdvances": {
            "!type": "fn(chars: +java.newArray, index: number, count: number, contextIndex: number, contextCount: number, isRtl: bool, advances: +java.newArray, advancesIndex: number) -> +java.lang.Float",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#getTextRunAdvances(char[], int, int, int, int, boolean, float[], int)"
          },
          "setStyle": {
            "!type": "fn(style: +android.graphics.Paint.Style) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#setStyle(android.graphics.Paint.Style)"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "getRunAdvance": {
            "!type": "fn(text: +java.newArray, start: number, end: number, contextStart: number, contextEnd: number, isRtl: bool, offset: number) -> +java.lang.Float",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#getRunAdvance(char[], int, int, int, int, boolean, int)"
          },
          "measureText": {
            "!type": "fn(text: +java.newArray, index: number, count: number) -> +java.lang.Float",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#measureText(char[], int, int)"
          },
          "set": {
            "!type": "fn(src: +android.graphics.Paint) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#set(android.graphics.Paint)"
          },
          "ascent": {
            "!type": "fn() -> +java.lang.Float",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#ascent()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "setAlpha": {
            "!type": "fn(a: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#setAlpha(int)"
          },
          "setBidiFlags": {
            "!type": "fn(flags: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#setBidiFlags(int)"
          },
          "getFlags": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#getFlags()"
          },
          "getShader": {
            "!type": "fn() -> +android.graphics.Shader",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#getShader()"
          },
          "getColor": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#getColor()"
          },
          "getLetterSpacing": {
            "!type": "fn() -> +java.lang.Float",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#getLetterSpacing()"
          },
          "setHinting": {
            "!type": "fn(mode: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#setHinting(int)"
          },
          "setLetterSpacing": {
            "!type": "fn(letterSpacing: +java.lang.Float) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#setLetterSpacing(float)"
          },
          "isStrikeThruText": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#isStrikeThruText()"
          },
          "setUnderlineText": {
            "!type": "fn(underlineText: bool) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#setUnderlineText(boolean)"
          },
          "getTypeface": {
            "!type": "fn() -> +android.graphics.Typeface",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#getTypeface()"
          },
          "getFontMetrics": {
            "!type": "fn(metrics: +android.graphics.Paint.FontMetrics) -> +java.lang.Float",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#getFontMetrics(android.graphics.Paint.FontMetrics)"
          },
          "reset": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#reset()"
          },
          "getRasterizer": {
            "!type": "fn() -> +android.graphics.Rasterizer",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#getRasterizer()"
          },
          "setRasterizer": {
            "!type": "fn(rasterizer: +android.graphics.Rasterizer) -> +android.graphics.Rasterizer",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#setRasterizer(android.graphics.Rasterizer)"
          },
          "getFillPath": {
            "!type": "fn(src: +android.graphics.Path, dst: +android.graphics.Path) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#getFillPath(android.graphics.Path, android.graphics.Path)"
          },
          "getNativeInstance": {
            "!type": "fn() -> +java.lang.Long",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#getNativeInstance()"
          },
          "setMaskFilter": {
            "!type": "fn(maskfilter: +android.graphics.MaskFilter) -> +android.graphics.MaskFilter",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#setMaskFilter(android.graphics.MaskFilter)"
          },
          "getBidiFlags": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#getBidiFlags()"
          },
          "getFontSpacing": {
            "!type": "fn() -> +java.lang.Float",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#getFontSpacing()"
          },
          "isElegantTextHeight": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#isElegantTextHeight()"
          },
          "getOffsetForAdvance": {
            "!type": "fn(text: +java.newArray, start: number, end: number, contextStart: number, contextEnd: number, isRtl: bool, advance: +java.lang.Float) -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#getOffsetForAdvance(char[], int, int, int, int, boolean, float)"
          },
          "setARGB": {
            "!type": "fn(a: number, r: number, g: number, b: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#setARGB(int, int, int, int)"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "getMaskFilter": {
            "!type": "fn() -> +android.graphics.MaskFilter",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#getMaskFilter()"
          },
          "setColorFilter": {
            "!type": "fn(filter: +android.graphics.ColorFilter) -> +android.graphics.ColorFilter",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#setColorFilter(android.graphics.ColorFilter)"
          },
          "isAntiAlias": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#isAntiAlias()"
          },
          "setStrikeThruText": {
            "!type": "fn(strikeThruText: bool) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#setStrikeThruText(boolean)"
          },
          "setFakeBoldText": {
            "!type": "fn(fakeBoldText: bool) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#setFakeBoldText(boolean)"
          },
          "getStrokeJoin": {
            "!type": "fn() -> +android.graphics.Paint.Join",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#getStrokeJoin()"
          },
          "setStrokeJoin": {
            "!type": "fn(join: +android.graphics.Paint.Join) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#setStrokeJoin(android.graphics.Paint.Join)"
          },
          "getStyle": {
            "!type": "fn() -> +android.graphics.Paint.Style",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#getStyle()"
          },
          "setElegantTextHeight": {
            "!type": "fn(elegant: bool) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#setElegantTextHeight(boolean)"
          },
          "setTextSize": {
            "!type": "fn(textSize: +java.lang.Float) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#setTextSize(float)"
          },
          "isUnderlineText": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#isUnderlineText()"
          },
          "isLinearText": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#isLinearText()"
          },
          "setFontFeatureSettings": {
            "!type": "fn(settings: string) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#setFontFeatureSettings(java.lang.String)"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "getTextBounds": {
            "!type": "fn(text: string, start: number, end: number, bounds: +android.graphics.Rect) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#getTextBounds(java.lang.String, int, int, android.graphics.Rect)"
          },
          "setStrokeCap": {
            "!type": "fn(cap: +android.graphics.Paint.Cap) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#setStrokeCap(android.graphics.Paint.Cap)"
          },
          "setStrokeMiter": {
            "!type": "fn(miter: +java.lang.Float) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#setStrokeMiter(float)"
          },
          "setLinearText": {
            "!type": "fn(linearText: bool) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#setLinearText(boolean)"
          },
          "setCompatibilityScaling": {
            "!type": "fn(factor: +java.lang.Float) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#setCompatibilityScaling(float)"
          },
          "getFontMetricsInt": {
            "!type": "fn(fmi: +android.graphics.Paint.FontMetricsInt) -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#getFontMetricsInt(android.graphics.Paint.FontMetricsInt)"
          },
          "getAlpha": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#getAlpha()"
          },
          "setTextAlign": {
            "!type": "fn(align: +android.graphics.Paint.Align) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#setTextAlign(android.graphics.Paint.Align)"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "setDither": {
            "!type": "fn(dither: bool) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#setDither(boolean)"
          },
          "isFakeBoldText": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#isFakeBoldText()"
          },
          "getStrokeMiter": {
            "!type": "fn() -> +java.lang.Float",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#getStrokeMiter()"
          },
          "getColorFilter": {
            "!type": "fn() -> +android.graphics.ColorFilter",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#getColorFilter()"
          },
          "getTextWidths": {
            "!type": "fn(text: +java.newArray, index: number, count: number, widths: +java.newArray) -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#getTextWidths(char[], int, int, float[])"
          },
          "getStrokeCap": {
            "!type": "fn() -> +android.graphics.Paint.Cap",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#getStrokeCap()"
          },
          "setXfermode": {
            "!type": "fn(xfermode: +android.graphics.Xfermode) -> +android.graphics.Xfermode",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#setXfermode(android.graphics.Xfermode)"
          },
          "breakText": {
            "!type": "fn(text: +java.newArray, index: number, count: number, maxWidth: +java.lang.Float, measuredWidth: +java.newArray) -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Paint.html#breakText(char[], int, int, float, float[])"
          }
        }
      },
      "PorterDuffXfermode_Delegate": {
        "!url": "http://developer.android.com/reference/android/graphics/PorterDuffXfermode_Delegate.html",
        "getDelegate": {
          "!type": "fn(native_instance: +java.lang.Long) -> +android.graphics.Xfermode_Delegate",
          "!url": "http://developer.android.com/reference/android/graphics/Xfermode_Delegate.html#getDelegate(long)"
        },
        "prototype": {
          "getSupportMessage": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/graphics/PorterDuffXfermode_Delegate.html#getSupportMessage()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "isSupported": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/PorterDuffXfermode_Delegate.html#isSupported()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "getComposite": {
            "!type": "fn(alpha: number) -> +java.awt.Composite",
            "!url": "http://developer.android.com/reference/android/graphics/PorterDuffXfermode_Delegate.html#getComposite(int)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "getMode": {
            "!type": "fn() -> +android.graphics.PorterDuff.Mode",
            "!url": "http://developer.android.com/reference/android/graphics/PorterDuffXfermode_Delegate.html#getMode()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "FontFamily": {
        "!url": "http://developer.android.com/reference/android/graphics/FontFamily.html",
        "!type": "fn()",
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "addFont": {
            "!type": "fn(path: string) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/FontFamily.html#addFont(java.lang.String)"
          },
          "addFontFromAsset": {
            "!type": "fn(mgr: +android.content.res.AssetManager, path: string) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/FontFamily.html#addFontFromAsset(android.content.res.AssetManager, java.lang.String)"
          },
          "addFontWeightStyle": {
            "!type": "fn(path: string, weight: number, style: bool) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/FontFamily.html#addFontWeightStyle(java.lang.String, int, boolean)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "ColorMatrix": {
        "!url": "http://developer.android.com/reference/android/graphics/ColorMatrix.html",
        "!type": "fn()",
        "prototype": {
          "preConcat": {
            "!type": "fn(prematrix: +android.graphics.ColorMatrix) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/ColorMatrix.html#preConcat(android.graphics.ColorMatrix)"
          },
          "setSaturation": {
            "!type": "fn(sat: +java.lang.Float) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/ColorMatrix.html#setSaturation(float)"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "setScale": {
            "!type": "fn(rScale: +java.lang.Float, gScale: +java.lang.Float, bScale: +java.lang.Float, aScale: +java.lang.Float) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/ColorMatrix.html#setScale(float, float, float, float)"
          },
          "setRotate": {
            "!type": "fn(axis: number, degrees: +java.lang.Float) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/ColorMatrix.html#setRotate(int, float)"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "set": {
            "!type": "fn(src: +android.graphics.ColorMatrix) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/ColorMatrix.html#set(android.graphics.ColorMatrix)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "setYUV2RGB": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/ColorMatrix.html#setYUV2RGB()"
          },
          "getArray": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/graphics/ColorMatrix.html#getArray()"
          },
          "setRGB2YUV": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/ColorMatrix.html#setRGB2YUV()"
          },
          "postConcat": {
            "!type": "fn(postmatrix: +android.graphics.ColorMatrix) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/ColorMatrix.html#postConcat(android.graphics.ColorMatrix)"
          },
          "reset": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/ColorMatrix.html#reset()"
          },
          "setConcat": {
            "!type": "fn(matA: +android.graphics.ColorMatrix, matB: +android.graphics.ColorMatrix) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/ColorMatrix.html#setConcat(android.graphics.ColorMatrix, android.graphics.ColorMatrix)"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          }
        }
      },
      "Shader": {
        "!url": "http://developer.android.com/reference/android/graphics/Shader.html",
        "!type": "fn()",
        "TileMode": {
          "!url": "http://developer.android.com/reference/android/graphics/Shader.TileMode.html",
          "REPEAT": {
            "!type": "+android.graphics.Shader.TileMode",
            "!url": "http://developer.android.com/reference/android/graphics/Shader.TileMode.html#REPEAT"
          },
          "MIRROR": {
            "!type": "+android.graphics.Shader.TileMode",
            "!url": "http://developer.android.com/reference/android/graphics/Shader.TileMode.html#MIRROR"
          },
          "CLAMP": {
            "!type": "+android.graphics.Shader.TileMode",
            "!url": "http://developer.android.com/reference/android/graphics/Shader.TileMode.html#CLAMP"
          },
          "valueOf": {
            "!type": "fn(name: string) -> +android.graphics.Shader.TileMode",
            "!url": "http://developer.android.com/reference/android/graphics/Shader.TileMode.html#valueOf(java.lang.String)"
          },
          "values": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/graphics/Shader.TileMode.html#values()"
          },
          "getSharedConstants": {
            "!type": "fn(enumType: +java.lang.Class) -> +java.newArray",
            "!url": "http://developer.android.com/reference/java/lang/Enum.html#getSharedConstants(java.lang.Class)"
          },
          "prototype": {
            "name": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#name()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#toString()"
            },
            "equals": {
              "!type": "fn(other: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#equals(java.lang.Object)"
            },
            "compareTo": {
              "!type": "fn(o: +java.lang.Enum) -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#compareTo(E)"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "getDeclaringClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#getDeclaringClass()"
            },
            "ordinal": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#ordinal()"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#hashCode()"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            }
          }
        },
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "getLocalMatrix": {
            "!type": "fn(localM: +android.graphics.Matrix) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Shader.html#getLocalMatrix(android.graphics.Matrix)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "setLocalMatrix": {
            "!type": "fn(localM: +android.graphics.Matrix) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Shader.html#setLocalMatrix(android.graphics.Matrix)"
          }
        }
      },
      "EmbossMaskFilter": {
        "!url": "http://developer.android.com/reference/android/graphics/EmbossMaskFilter.html",
        "!type": "fn(direction: +java.newArray, ambient: +java.lang.Float, specular: +java.lang.Float, blurRadius: +java.lang.Float)",
        "prototype": {
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          }
        }
      },
      "BitmapShader": {
        "!url": "http://developer.android.com/reference/android/graphics/BitmapShader.html",
        "!type": "fn(bitmap: +android.graphics.Bitmap, tileX: +android.graphics.Shader.TileMode, tileY: +android.graphics.Shader.TileMode)",
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "getLocalMatrix": {
            "!type": "fn(localM: +android.graphics.Matrix) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Shader.html#getLocalMatrix(android.graphics.Matrix)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "setLocalMatrix": {
            "!type": "fn(localM: +android.graphics.Matrix) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Shader.html#setLocalMatrix(android.graphics.Matrix)"
          }
        }
      },
      "Picture": {
        "!url": "http://developer.android.com/reference/android/graphics/Picture.html",
        "!type": "fn()",
        "createFromStream": {
          "!type": "fn(stream: +java.io.InputStream) -> +android.graphics.Picture",
          "!url": "http://developer.android.com/reference/android/graphics/Picture.html#createFromStream(java.io.InputStream)"
        },
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "beginRecording": {
            "!type": "fn(width: number, height: number) -> +android.graphics.Canvas",
            "!url": "http://developer.android.com/reference/android/graphics/Picture.html#beginRecording(int, int)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "getHeight": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Picture.html#getHeight()"
          },
          "getWidth": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Picture.html#getWidth()"
          },
          "writeToStream": {
            "!type": "fn(stream: +java.io.OutputStream) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Picture.html#writeToStream(java.io.OutputStream)"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "draw": {
            "!type": "fn(canvas: +android.graphics.Canvas) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Picture.html#draw(android.graphics.Canvas)"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "endRecording": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Picture.html#endRecording()"
          }
        }
      },
      "DiscretePathEffect_Delegate": {
        "!url": "http://developer.android.com/reference/android/graphics/DiscretePathEffect_Delegate.html",
        "!type": "fn()",
        "getDelegate": {
          "!type": "fn(nativeShader: +java.lang.Long) -> +android.graphics.PathEffect_Delegate",
          "!url": "http://developer.android.com/reference/android/graphics/PathEffect_Delegate.html#getDelegate(long)"
        },
        "prototype": {
          "getSupportMessage": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/graphics/DiscretePathEffect_Delegate.html#getSupportMessage()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "isSupported": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/DiscretePathEffect_Delegate.html#isSupported()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "getStroke": {
            "!type": "fn(paint: +android.graphics.Paint_Delegate) -> +java.awt.Stroke",
            "!url": "http://developer.android.com/reference/android/graphics/DiscretePathEffect_Delegate.html#getStroke(android.graphics.Paint_Delegate)"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "DrawFilter": {
        "!url": "http://developer.android.com/reference/android/graphics/DrawFilter.html",
        "!type": "fn()",
        "prototype": {
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          }
        }
      },
      "PathMeasure": {
        "!url": "http://developer.android.com/reference/android/graphics/PathMeasure.html",
        "!type": "fn()",
        "POSITION_MATRIX_FLAG": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/PathMeasure.html#POSITION_MATRIX_FLAG"
        },
        "TANGENT_MATRIX_FLAG": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/PathMeasure.html#TANGENT_MATRIX_FLAG"
        },
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "isClosed": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/PathMeasure.html#isClosed()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "getMatrix": {
            "!type": "fn(distance: +java.lang.Float, matrix: +android.graphics.Matrix, flags: number) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/PathMeasure.html#getMatrix(float, android.graphics.Matrix, int)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "getSegment": {
            "!type": "fn(startD: +java.lang.Float, stopD: +java.lang.Float, dst: +android.graphics.Path, startWithMoveTo: bool) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/PathMeasure.html#getSegment(float, float, android.graphics.Path, boolean)"
          },
          "setPath": {
            "!type": "fn(path: +android.graphics.Path, forceClosed: bool) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/PathMeasure.html#setPath(android.graphics.Path, boolean)"
          },
          "getLength": {
            "!type": "fn() -> +java.lang.Float",
            "!url": "http://developer.android.com/reference/android/graphics/PathMeasure.html#getLength()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "nextContour": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/PathMeasure.html#nextContour()"
          },
          "getPosTan": {
            "!type": "fn(distance: +java.lang.Float, pos: +java.newArray, tan: +java.newArray) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/PathMeasure.html#getPosTan(float, float[], float[])"
          }
        }
      },
      "LightingColorFilter_Delegate": {
        "!url": "http://developer.android.com/reference/android/graphics/LightingColorFilter_Delegate.html",
        "!type": "fn()",
        "getDelegate": {
          "!type": "fn(nativeShader: +java.lang.Long) -> +android.graphics.ColorFilter_Delegate",
          "!url": "http://developer.android.com/reference/android/graphics/ColorFilter_Delegate.html#getDelegate(long)"
        },
        "prototype": {
          "getSupportMessage": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/graphics/LightingColorFilter_Delegate.html#getSupportMessage()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "isSupported": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/ColorFilter_Delegate.html#isSupported()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "applyFilter": {
            "!type": "fn(g: +java.awt.Graphics2D, width: number, height: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/ColorFilter_Delegate.html#applyFilter(java.awt.Graphics2D, int, int)"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "Xfermode": {
        "!url": "http://developer.android.com/reference/android/graphics/Xfermode.html",
        "!type": "fn()",
        "prototype": {
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          }
        }
      },
      "CornerPathEffect": {
        "!url": "http://developer.android.com/reference/android/graphics/CornerPathEffect.html",
        "!type": "fn(radius: +java.lang.Float)",
        "prototype": {
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          }
        }
      },
      "PathDashPathEffect_Delegate": {
        "!url": "http://developer.android.com/reference/android/graphics/PathDashPathEffect_Delegate.html",
        "!type": "fn()",
        "getDelegate": {
          "!type": "fn(nativeShader: +java.lang.Long) -> +android.graphics.PathEffect_Delegate",
          "!url": "http://developer.android.com/reference/android/graphics/PathEffect_Delegate.html#getDelegate(long)"
        },
        "prototype": {
          "getSupportMessage": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/graphics/PathDashPathEffect_Delegate.html#getSupportMessage()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "isSupported": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/PathDashPathEffect_Delegate.html#isSupported()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "getStroke": {
            "!type": "fn(paint: +android.graphics.Paint_Delegate) -> +java.awt.Stroke",
            "!url": "http://developer.android.com/reference/android/graphics/PathDashPathEffect_Delegate.html#getStroke(android.graphics.Paint_Delegate)"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "SweepGradient": {
        "!url": "http://developer.android.com/reference/android/graphics/SweepGradient.html",
        "!type": "fn(cx: +java.lang.Float, cy: +java.lang.Float, colors: +java.newArray, positions: +java.newArray)",
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "getLocalMatrix": {
            "!type": "fn(localM: +android.graphics.Matrix) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Shader.html#getLocalMatrix(android.graphics.Matrix)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "setLocalMatrix": {
            "!type": "fn(localM: +android.graphics.Matrix) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Shader.html#setLocalMatrix(android.graphics.Matrix)"
          }
        }
      },
      "LayerRasterizer": {
        "!url": "http://developer.android.com/reference/android/graphics/LayerRasterizer.html",
        "!type": "fn()",
        "prototype": {
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "addLayer": {
            "!type": "fn(paint: +android.graphics.Paint, dx: +java.lang.Float, dy: +java.lang.Float) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/LayerRasterizer.html#addLayer(android.graphics.Paint, float, float)"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          }
        }
      },
      "TemporaryBuffer": {
        "!url": "http://developer.android.com/reference/android/graphics/TemporaryBuffer.html",
        "!type": "fn()",
        "recycle": {
          "!type": "fn(temp: +java.newArray) -> void",
          "!url": "http://developer.android.com/reference/android/graphics/TemporaryBuffer.html#recycle(char[])"
        },
        "obtain": {
          "!type": "fn(len: number) -> +java.newArray",
          "!url": "http://developer.android.com/reference/android/graphics/TemporaryBuffer.html#obtain(int)"
        },
        "prototype": {
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          }
        }
      },
      "YuvImage": {
        "!url": "http://developer.android.com/reference/android/graphics/YuvImage.html",
        "!type": "fn(yuv: +java.newArray, format: number, width: number, height: number, strides: +java.newArray)",
        "prototype": {
          "getStrides": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/graphics/YuvImage.html#getStrides()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "compressToJpeg": {
            "!type": "fn(rectangle: +android.graphics.Rect, quality: number, stream: +java.io.OutputStream) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/YuvImage.html#compressToJpeg(android.graphics.Rect, int, java.io.OutputStream)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "getHeight": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/YuvImage.html#getHeight()"
          },
          "getWidth": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/YuvImage.html#getWidth()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getYuvFormat": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/YuvImage.html#getYuvFormat()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "getYuvData": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/graphics/YuvImage.html#getYuvData()"
          }
        }
      },
      "DashPathEffect_Delegate": {
        "!url": "http://developer.android.com/reference/android/graphics/DashPathEffect_Delegate.html",
        "getDelegate": {
          "!type": "fn(nativeShader: +java.lang.Long) -> +android.graphics.PathEffect_Delegate",
          "!url": "http://developer.android.com/reference/android/graphics/PathEffect_Delegate.html#getDelegate(long)"
        },
        "prototype": {
          "getSupportMessage": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/graphics/DashPathEffect_Delegate.html#getSupportMessage()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "isSupported": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/DashPathEffect_Delegate.html#isSupported()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "getStroke": {
            "!type": "fn(paint: +android.graphics.Paint_Delegate) -> +java.awt.Stroke",
            "!url": "http://developer.android.com/reference/android/graphics/DashPathEffect_Delegate.html#getStroke(android.graphics.Paint_Delegate)"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "BitmapRegionDecoder": {
        "!url": "http://developer.android.com/reference/android/graphics/BitmapRegionDecoder.html",
        "newInstance": {
          "!type": "fn(data: +java.newArray, offset: number, length: number, isShareable: bool) -> +android.graphics.BitmapRegionDecoder",
          "!url": "http://developer.android.com/reference/android/graphics/BitmapRegionDecoder.html#newInstance(byte[], int, int, boolean)"
        },
        "prototype": {
          "isRecycled": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/BitmapRegionDecoder.html#isRecycled()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "recycle": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/BitmapRegionDecoder.html#recycle()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "getHeight": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/BitmapRegionDecoder.html#getHeight()"
          },
          "decodeRegion": {
            "!type": "fn(rect: +android.graphics.Rect, options: +android.graphics.BitmapFactory.Options) -> +android.graphics.Bitmap",
            "!url": "http://developer.android.com/reference/android/graphics/BitmapRegionDecoder.html#decodeRegion(android.graphics.Rect, android.graphics.BitmapFactory.Options)"
          },
          "getWidth": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/BitmapRegionDecoder.html#getWidth()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "Rasterizer_Delegate": {
        "!url": "http://developer.android.com/reference/android/graphics/Rasterizer_Delegate.html",
        "!type": "fn()",
        "getDelegate": {
          "!type": "fn(nativeShader: +java.lang.Long) -> +android.graphics.Rasterizer_Delegate",
          "!url": "http://developer.android.com/reference/android/graphics/Rasterizer_Delegate.html#getDelegate(long)"
        },
        "prototype": {
          "getSupportMessage": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/graphics/Rasterizer_Delegate.html#getSupportMessage()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "isSupported": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Rasterizer_Delegate.html#isSupported()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "Bitmap": {
        "!url": "http://developer.android.com/reference/android/graphics/Bitmap.html",
        "Config": {
          "!url": "http://developer.android.com/reference/android/graphics/Bitmap.Config.html",
          "ALPHA_8": {
            "!type": "+android.graphics.Bitmap.Config",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.Config.html#ALPHA_8"
          },
          "RGB_565": {
            "!type": "+android.graphics.Bitmap.Config",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.Config.html#RGB_565"
          },
          "ARGB_8888": {
            "!type": "+android.graphics.Bitmap.Config",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.Config.html#ARGB_8888"
          },
          "ARGB_4444": {
            "!type": "+android.graphics.Bitmap.Config",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.Config.html#ARGB_4444"
          },
          "valueOf": {
            "!type": "fn(name: string) -> +android.graphics.Bitmap.Config",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.Config.html#valueOf(java.lang.String)"
          },
          "values": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.Config.html#values()"
          },
          "getSharedConstants": {
            "!type": "fn(enumType: +java.lang.Class) -> +java.newArray",
            "!url": "http://developer.android.com/reference/java/lang/Enum.html#getSharedConstants(java.lang.Class)"
          },
          "prototype": {
            "name": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#name()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#toString()"
            },
            "equals": {
              "!type": "fn(other: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#equals(java.lang.Object)"
            },
            "compareTo": {
              "!type": "fn(o: +java.lang.Enum) -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#compareTo(E)"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "getDeclaringClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#getDeclaringClass()"
            },
            "ordinal": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#ordinal()"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#hashCode()"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            }
          }
        },
        "CompressFormat": {
          "!url": "http://developer.android.com/reference/android/graphics/Bitmap.CompressFormat.html",
          "PNG": {
            "!type": "+android.graphics.Bitmap.CompressFormat",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.CompressFormat.html#PNG"
          },
          "JPEG": {
            "!type": "+android.graphics.Bitmap.CompressFormat",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.CompressFormat.html#JPEG"
          },
          "WEBP": {
            "!type": "+android.graphics.Bitmap.CompressFormat",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.CompressFormat.html#WEBP"
          },
          "valueOf": {
            "!type": "fn(name: string) -> +android.graphics.Bitmap.CompressFormat",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.CompressFormat.html#valueOf(java.lang.String)"
          },
          "values": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.CompressFormat.html#values()"
          },
          "getSharedConstants": {
            "!type": "fn(enumType: +java.lang.Class) -> +java.newArray",
            "!url": "http://developer.android.com/reference/java/lang/Enum.html#getSharedConstants(java.lang.Class)"
          },
          "prototype": {
            "name": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#name()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#toString()"
            },
            "equals": {
              "!type": "fn(other: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#equals(java.lang.Object)"
            },
            "compareTo": {
              "!type": "fn(o: +java.lang.Enum) -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#compareTo(E)"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "getDeclaringClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#getDeclaringClass()"
            },
            "ordinal": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#ordinal()"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#hashCode()"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            }
          }
        },
        "CREATOR": {
          "!type": "+android.os.Parcelable.Creator",
          "!url": "http://developer.android.com/reference/android/graphics/Bitmap.html#CREATOR"
        },
        "DENSITY_NONE": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/graphics/Bitmap.html#DENSITY_NONE"
        },
        "createScaledBitmap": {
          "!type": "fn(src: +android.graphics.Bitmap, dstWidth: number, dstHeight: number, filter: bool) -> +android.graphics.Bitmap",
          "!url": "http://developer.android.com/reference/android/graphics/Bitmap.html#createScaledBitmap(android.graphics.Bitmap, int, int, boolean)"
        },
        "createBitmap": {
          "!type": "fn(src: +android.graphics.Bitmap) -> +android.graphics.Bitmap",
          "!url": "http://developer.android.com/reference/android/graphics/Bitmap.html#createBitmap(android.graphics.Bitmap)"
        },
        "setDefaultDensity": {
          "!type": "fn(density: number) -> void",
          "!url": "http://developer.android.com/reference/android/graphics/Bitmap.html#setDefaultDensity(int)"
        },
        "scaleFromDensity": {
          "!type": "fn(size: number, sdensity: number, tdensity: number) -> number",
          "!url": "http://developer.android.com/reference/android/graphics/Bitmap.html#scaleFromDensity(int, int, int)"
        },
        "prototype": {
          "describeContents": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.html#describeContents()"
          },
          "getAllocationByteCount": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.html#getAllocationByteCount()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "setDensity": {
            "!type": "fn(density: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.html#setDensity(int)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "recycle": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.html#recycle()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "setNinePatchChunk": {
            "!type": "fn(chunk: +java.newArray) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.html#setNinePatchChunk(byte[])"
          },
          "reconfigure": {
            "!type": "fn(width: number, height: number, config: +android.graphics.Bitmap.Config) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.html#reconfigure(int, int, android.graphics.Bitmap.Config)"
          },
          "getByteCount": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.html#getByteCount()"
          },
          "getConfig": {
            "!type": "fn() -> +android.graphics.Bitmap.Config",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.html#getConfig()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "refSkPixelRef": {
            "!type": "fn() -> +java.lang.Long",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.html#refSkPixelRef()"
          },
          "copyPixelsFromBuffer": {
            "!type": "fn(src: +java.nio.Buffer) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.html#copyPixelsFromBuffer(java.nio.Buffer)"
          },
          "setPixel": {
            "!type": "fn(x: number, y: number, color: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.html#setPixel(int, int, int)"
          },
          "hasAlpha": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.html#hasAlpha()"
          },
          "getPixel": {
            "!type": "fn(x: number, y: number) -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.html#getPixel(int, int)"
          },
          "setConfig": {
            "!type": "fn(config: +android.graphics.Bitmap.Config) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.html#setConfig(android.graphics.Bitmap.Config)"
          },
          "hasMipMap": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.html#hasMipMap()"
          },
          "sameAs": {
            "!type": "fn(other: +android.graphics.Bitmap) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.html#sameAs(android.graphics.Bitmap)"
          },
          "copyPixelsToBuffer": {
            "!type": "fn(dst: +java.nio.Buffer) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.html#copyPixelsToBuffer(java.nio.Buffer)"
          },
          "setPremultiplied": {
            "!type": "fn(premultiplied: bool) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.html#setPremultiplied(boolean)"
          },
          "setHasAlpha": {
            "!type": "fn(hasAlpha: bool) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.html#setHasAlpha(boolean)"
          },
          "getGenerationId": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.html#getGenerationId()"
          },
          "getRowBytes": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.html#getRowBytes()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "getNinePatchInsets": {
            "!type": "fn() -> +android.graphics.NinePatch.InsetStruct",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.html#getNinePatchInsets()"
          },
          "prepareToDraw": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.html#prepareToDraw()"
          },
          "isRecycled": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.html#isRecycled()"
          },
          "getOpticalInsets": {
            "!type": "fn(outInsets: +android.graphics.Rect) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.html#getOpticalInsets(android.graphics.Rect)"
          },
          "getHeight": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.html#getHeight()"
          },
          "getDensity": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.html#getDensity()"
          },
          "getScaledWidth": {
            "!type": "fn(canvas: +android.graphics.Canvas) -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.html#getScaledWidth(android.graphics.Canvas)"
          },
          "isPremultiplied": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.html#isPremultiplied()"
          },
          "writeToParcel": {
            "!type": "fn(p: +android.os.Parcel, flags: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.html#writeToParcel(android.os.Parcel, int)"
          },
          "isMutable": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.html#isMutable()"
          },
          "setHeight": {
            "!type": "fn(height: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.html#setHeight(int)"
          },
          "getPixels": {
            "!type": "fn(pixels: +java.newArray, offset: number, stride: number, x: number, y: number, width: number, height: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.html#getPixels(int[], int, int, int, int, int, int)"
          },
          "getScaledHeight": {
            "!type": "fn(canvas: +android.graphics.Canvas) -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.html#getScaledHeight(android.graphics.Canvas)"
          },
          "getNinePatchChunk": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.html#getNinePatchChunk()"
          },
          "extractAlpha": {
            "!type": "fn() -> +android.graphics.Bitmap",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.html#extractAlpha()"
          },
          "eraseColor": {
            "!type": "fn(c: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.html#eraseColor(int)"
          },
          "setPixels": {
            "!type": "fn(pixels: +java.newArray, offset: number, stride: number, x: number, y: number, width: number, height: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.html#setPixels(int[], int, int, int, int, int, int)"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "setWidth": {
            "!type": "fn(width: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.html#setWidth(int)"
          },
          "setHasMipMap": {
            "!type": "fn(hasMipMap: bool) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.html#setHasMipMap(boolean)"
          },
          "getWidth": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.html#getWidth()"
          },
          "copy": {
            "!type": "fn(config: +android.graphics.Bitmap.Config, isMutable: bool) -> +android.graphics.Bitmap",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.html#copy(android.graphics.Bitmap.Config, boolean)"
          },
          "createAshmemBitmap": {
            "!type": "fn() -> +android.graphics.Bitmap",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.html#createAshmemBitmap()"
          },
          "compress": {
            "!type": "fn(format: +android.graphics.Bitmap.CompressFormat, quality: number, stream: +java.io.OutputStream) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Bitmap.html#compress(android.graphics.Bitmap.CompressFormat, int, java.io.OutputStream)"
          }
        }
      },
      "RectF": {
        "!url": "http://developer.android.com/reference/android/graphics/RectF.html",
        "!type": "fn()",
        "CREATOR": {
          "!type": "+android.os.Parcelable.Creator",
          "!url": "http://developer.android.com/reference/android/graphics/RectF.html#CREATOR"
        },
        "intersects": {
          "!type": "fn(a: +android.graphics.RectF, b: +android.graphics.RectF) -> bool",
          "!url": "http://developer.android.com/reference/android/graphics/RectF.html#intersects(android.graphics.RectF, android.graphics.RectF)"
        },
        "prototype": {
          "writeToParcel": {
            "!type": "fn(out: +android.os.Parcel, flags: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/RectF.html#writeToParcel(android.os.Parcel, int)"
          },
          "intersects": {
            "!type": "fn(left: +java.lang.Float, top: +java.lang.Float, right: +java.lang.Float, bottom: +java.lang.Float) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/RectF.html#intersects(float, float, float, float)"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "union": {
            "!type": "fn(left: +java.lang.Float, top: +java.lang.Float, right: +java.lang.Float, bottom: +java.lang.Float) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/RectF.html#union(float, float, float, float)"
          },
          "toShortString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/graphics/RectF.html#toShortString()"
          },
          "setIntersect": {
            "!type": "fn(a: +android.graphics.RectF, b: +android.graphics.RectF) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/RectF.html#setIntersect(android.graphics.RectF, android.graphics.RectF)"
          },
          "offsetTo": {
            "!type": "fn(newLeft: +java.lang.Float, newTop: +java.lang.Float) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/RectF.html#offsetTo(float, float)"
          },
          "offset": {
            "!type": "fn(dx: +java.lang.Float, dy: +java.lang.Float) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/RectF.html#offset(float, float)"
          },
          "readFromParcel": {
            "!type": "fn(in: +android.os.Parcel) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/RectF.html#readFromParcel(android.os.Parcel)"
          },
          "centerY": {
            "!type": "fn() -> +java.lang.Float",
            "!url": "http://developer.android.com/reference/android/graphics/RectF.html#centerY()"
          },
          "contains": {
            "!type": "fn(x: +java.lang.Float, y: +java.lang.Float) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/RectF.html#contains(float, float)"
          },
          "centerX": {
            "!type": "fn() -> +java.lang.Float",
            "!url": "http://developer.android.com/reference/android/graphics/RectF.html#centerX()"
          },
          "describeContents": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/RectF.html#describeContents()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/RectF.html#equals(java.lang.Object)"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "set": {
            "!type": "fn(left: +java.lang.Float, top: +java.lang.Float, right: +java.lang.Float, bottom: +java.lang.Float) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/RectF.html#set(float, float, float, float)"
          },
          "printShortString": {
            "!type": "fn(pw: +java.io.PrintWriter) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/RectF.html#printShortString(java.io.PrintWriter)"
          },
          "isEmpty": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/RectF.html#isEmpty()"
          },
          "height": {
            "!type": "fn() -> +java.lang.Float",
            "!url": "http://developer.android.com/reference/android/graphics/RectF.html#height()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "width": {
            "!type": "fn() -> +java.lang.Float",
            "!url": "http://developer.android.com/reference/android/graphics/RectF.html#width()"
          },
          "inset": {
            "!type": "fn(dx: +java.lang.Float, dy: +java.lang.Float) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/RectF.html#inset(float, float)"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/graphics/RectF.html#toString()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/RectF.html#hashCode()"
          },
          "setEmpty": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/RectF.html#setEmpty()"
          },
          "intersect": {
            "!type": "fn(left: +java.lang.Float, top: +java.lang.Float, right: +java.lang.Float, bottom: +java.lang.Float) -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/RectF.html#intersect(float, float, float, float)"
          },
          "sort": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/RectF.html#sort()"
          },
          "round": {
            "!type": "fn(dst: +android.graphics.Rect) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/RectF.html#round(android.graphics.Rect)"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "roundOut": {
            "!type": "fn(dst: +android.graphics.Rect) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/RectF.html#roundOut(android.graphics.Rect)"
          }
        }
      },
      "NinePatch": {
        "!url": "http://developer.android.com/reference/android/graphics/NinePatch.html",
        "!type": "fn(bitmap: +android.graphics.Bitmap, chunk: +java.newArray)",
        "InsetStruct": {
          "!url": "http://developer.android.com/reference/android/graphics/NinePatch.InsetStruct.html",
          "prototype": {
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "equals": {
              "!type": "fn(o: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
            }
          }
        },
        "isNinePatchChunk": {
          "!type": "fn(chunk: +java.newArray) -> bool",
          "!url": "http://developer.android.com/reference/android/graphics/NinePatch.html#isNinePatchChunk(byte[])"
        },
        "prototype": {
          "getPaint": {
            "!type": "fn() -> +android.graphics.Paint",
            "!url": "http://developer.android.com/reference/android/graphics/NinePatch.html#getPaint()"
          },
          "getName": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/graphics/NinePatch.html#getName()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "getBitmap": {
            "!type": "fn() -> +android.graphics.Bitmap",
            "!url": "http://developer.android.com/reference/android/graphics/NinePatch.html#getBitmap()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "hasAlpha": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/NinePatch.html#hasAlpha()"
          },
          "getHeight": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/NinePatch.html#getHeight()"
          },
          "getTransparentRegion": {
            "!type": "fn(bounds: +android.graphics.Rect) -> +android.graphics.Region",
            "!url": "http://developer.android.com/reference/android/graphics/NinePatch.html#getTransparentRegion(android.graphics.Rect)"
          },
          "getWidth": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/NinePatch.html#getWidth()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getDensity": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/NinePatch.html#getDensity()"
          },
          "draw": {
            "!type": "fn(canvas: +android.graphics.Canvas, location: +android.graphics.RectF) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/NinePatch.html#draw(android.graphics.Canvas, android.graphics.RectF)"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "setPaint": {
            "!type": "fn(p: +android.graphics.Paint) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/NinePatch.html#setPaint(android.graphics.Paint)"
          }
        }
      },
      "ColorMatrixColorFilter": {
        "!url": "http://developer.android.com/reference/android/graphics/ColorMatrixColorFilter.html",
        "!type": "fn(matrix: +android.graphics.ColorMatrix)",
        "prototype": {
          "setColorMatrix": {
            "!type": "fn(matrix: +android.graphics.ColorMatrix) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/ColorMatrixColorFilter.html#setColorMatrix(android.graphics.ColorMatrix)"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "getColorMatrix": {
            "!type": "fn() -> +android.graphics.ColorMatrix",
            "!url": "http://developer.android.com/reference/android/graphics/ColorMatrixColorFilter.html#getColorMatrix()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "ComposePathEffect": {
        "!url": "http://developer.android.com/reference/android/graphics/ComposePathEffect.html",
        "!type": "fn(outerpe: +android.graphics.PathEffect, innerpe: +android.graphics.PathEffect)",
        "prototype": {
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          }
        }
      },
      "Camera": {
        "!url": "http://developer.android.com/reference/android/graphics/Camera.html",
        "!type": "fn()",
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "applyToCanvas": {
            "!type": "fn(canvas: +android.graphics.Canvas) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Camera.html#applyToCanvas(android.graphics.Canvas)"
          },
          "setLocation": {
            "!type": "fn(x: +java.lang.Float, y: +java.lang.Float, z: +java.lang.Float) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Camera.html#setLocation(float, float, float)"
          },
          "dotWithNormal": {
            "!type": "fn(dx: +java.lang.Float, dy: +java.lang.Float, dz: +java.lang.Float) -> +java.lang.Float",
            "!url": "http://developer.android.com/reference/android/graphics/Camera.html#dotWithNormal(float, float, float)"
          },
          "rotateZ": {
            "!type": "fn(deg: +java.lang.Float) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Camera.html#rotateZ(float)"
          },
          "rotateY": {
            "!type": "fn(deg: +java.lang.Float) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Camera.html#rotateY(float)"
          },
          "rotateX": {
            "!type": "fn(deg: +java.lang.Float) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Camera.html#rotateX(float)"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "translate": {
            "!type": "fn(x: +java.lang.Float, y: +java.lang.Float, z: +java.lang.Float) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Camera.html#translate(float, float, float)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "getMatrix": {
            "!type": "fn(matrix: +android.graphics.Matrix) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Camera.html#getMatrix(android.graphics.Matrix)"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "getLocationZ": {
            "!type": "fn() -> +java.lang.Float",
            "!url": "http://developer.android.com/reference/android/graphics/Camera.html#getLocationZ()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getLocationY": {
            "!type": "fn() -> +java.lang.Float",
            "!url": "http://developer.android.com/reference/android/graphics/Camera.html#getLocationY()"
          },
          "getLocationX": {
            "!type": "fn() -> +java.lang.Float",
            "!url": "http://developer.android.com/reference/android/graphics/Camera.html#getLocationX()"
          },
          "rotate": {
            "!type": "fn(x: +java.lang.Float, y: +java.lang.Float, z: +java.lang.Float) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Camera.html#rotate(float, float, float)"
          },
          "restore": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Camera.html#restore()"
          },
          "save": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Camera.html#save()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          }
        }
      },
      "RadialGradient_Delegate": {
        "!url": "http://developer.android.com/reference/android/graphics/RadialGradient_Delegate.html",
        "getDelegate": {
          "!type": "fn(nativeShader: +java.lang.Long) -> +android.graphics.Shader_Delegate",
          "!url": "http://developer.android.com/reference/android/graphics/Shader_Delegate.html#getDelegate(long)"
        },
        "getTileMode": {
          "!type": "fn(tileMode: number) -> +android.graphics.Shader.TileMode",
          "!url": "http://developer.android.com/reference/android/graphics/Shader_Delegate.html#getTileMode(int)"
        },
        "prototype": {
          "getSupportMessage": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/graphics/Gradient_Delegate.html#getSupportMessage()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "isSupported": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Gradient_Delegate.html#isSupported()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "getJavaPaint": {
            "!type": "fn() -> +java.awt.Paint",
            "!url": "http://developer.android.com/reference/android/graphics/RadialGradient_Delegate.html#getJavaPaint()"
          }
        }
      },
      "TypefaceTest": {
        "!url": "http://developer.android.com/reference/android/graphics/TypefaceTest.html",
        "!type": "fn()",
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "testUnique": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/TypefaceTest.html#testUnique()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "testBasic": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/TypefaceTest.html#testBasic()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "testUniformY": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/TypefaceTest.html#testUniformY()"
          },
          "testStyles": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/graphics/TypefaceTest.html#testStyles()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "BidiRenderer": {
        "!url": "http://developer.android.com/reference/android/graphics/BidiRenderer.html",
        "!type": "fn(graphics: +java.awt.Graphics2D, paint: +android.graphics.Paint_Delegate, text: +java.newArray)",
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "renderText": {
            "!type": "fn(start: number, limit: number, bidiFlags: number, advances: +java.newArray, advancesIndex: number, draw: bool) -> +android.graphics.RectF",
            "!url": "http://developer.android.com/reference/android/graphics/BidiRenderer.html#renderText(int, int, int, float[], int, boolean)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "setRenderLocation": {
            "!type": "fn(x: +java.lang.Float, y: +java.lang.Float) -> +android.graphics.BidiRenderer",
            "!url": "http://developer.android.com/reference/android/graphics/BidiRenderer.html#setRenderLocation(float, float)"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "NinePatch_Delegate": {
        "!url": "http://developer.android.com/reference/android/graphics/NinePatch_Delegate.html",
        "!type": "fn()",
        "serialize": {
          "!type": "fn(chunk: NinePatchChunk) -> +java.newArray",
          "!url": "http://developer.android.com/reference/android/graphics/NinePatch_Delegate.html#serialize(NinePatchChunk)"
        },
        "getChunk": {
          "!type": "fn(array: +java.newArray) -> NinePatchChunk",
          "!url": "http://developer.android.com/reference/android/graphics/NinePatch_Delegate.html#getChunk(byte[])"
        },
        "prototype": {
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          }
        }
      },
      "ColorFilter_Delegate": {
        "!url": "http://developer.android.com/reference/android/graphics/ColorFilter_Delegate.html",
        "!type": "fn()",
        "getDelegate": {
          "!type": "fn(nativeShader: +java.lang.Long) -> +android.graphics.ColorFilter_Delegate",
          "!url": "http://developer.android.com/reference/android/graphics/ColorFilter_Delegate.html#getDelegate(long)"
        },
        "prototype": {
          "getSupportMessage": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/graphics/ColorFilter_Delegate.html#getSupportMessage()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "isSupported": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/ColorFilter_Delegate.html#isSupported()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "applyFilter": {
            "!type": "fn(g: +java.awt.Graphics2D, width: number, height: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/ColorFilter_Delegate.html#applyFilter(java.awt.Graphics2D, int, int)"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "DrawFilter_Delegate": {
        "!url": "http://developer.android.com/reference/android/graphics/DrawFilter_Delegate.html",
        "!type": "fn()",
        "getDelegate": {
          "!type": "fn(nativeDrawFilter: +java.lang.Long) -> +android.graphics.DrawFilter_Delegate",
          "!url": "http://developer.android.com/reference/android/graphics/DrawFilter_Delegate.html#getDelegate(long)"
        },
        "prototype": {
          "getSupportMessage": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/graphics/DrawFilter_Delegate.html#getSupportMessage()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "isSupported": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/DrawFilter_Delegate.html#isSupported()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "SumPathEffect_Delegate": {
        "!url": "http://developer.android.com/reference/android/graphics/SumPathEffect_Delegate.html",
        "!type": "fn()",
        "getDelegate": {
          "!type": "fn(nativeShader: +java.lang.Long) -> +android.graphics.PathEffect_Delegate",
          "!url": "http://developer.android.com/reference/android/graphics/PathEffect_Delegate.html#getDelegate(long)"
        },
        "prototype": {
          "getSupportMessage": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/graphics/SumPathEffect_Delegate.html#getSupportMessage()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "isSupported": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/SumPathEffect_Delegate.html#isSupported()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "getStroke": {
            "!type": "fn(paint: +android.graphics.Paint_Delegate) -> +java.awt.Stroke",
            "!url": "http://developer.android.com/reference/android/graphics/SumPathEffect_Delegate.html#getStroke(android.graphics.Paint_Delegate)"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "SweepGradient_Delegate": {
        "!url": "http://developer.android.com/reference/android/graphics/SweepGradient_Delegate.html",
        "getDelegate": {
          "!type": "fn(nativeShader: +java.lang.Long) -> +android.graphics.Shader_Delegate",
          "!url": "http://developer.android.com/reference/android/graphics/Shader_Delegate.html#getDelegate(long)"
        },
        "getTileMode": {
          "!type": "fn(tileMode: number) -> +android.graphics.Shader.TileMode",
          "!url": "http://developer.android.com/reference/android/graphics/Shader_Delegate.html#getTileMode(int)"
        },
        "prototype": {
          "getSupportMessage": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/graphics/Gradient_Delegate.html#getSupportMessage()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "isSupported": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/graphics/Gradient_Delegate.html#isSupported()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "getJavaPaint": {
            "!type": "fn() -> +java.awt.Paint",
            "!url": "http://developer.android.com/reference/android/graphics/SweepGradient_Delegate.html#getJavaPaint()"
          }
        }
      },
      "Interpolator": {
        "!url": "http://developer.android.com/reference/android/graphics/Interpolator.html",
        "!type": "fn(valueCount: number)",
        "Result": {
          "!url": "http://developer.android.com/reference/android/graphics/Interpolator.Result.html",
          "FREEZE_END": {
            "!type": "+android.graphics.Interpolator.Result",
            "!url": "http://developer.android.com/reference/android/graphics/Interpolator.Result.html#FREEZE_END"
          },
          "FREEZE_START": {
            "!type": "+android.graphics.Interpolator.Result",
            "!url": "http://developer.android.com/reference/android/graphics/Interpolator.Result.html#FREEZE_START"
          },
          "NORMAL": {
            "!type": "+android.graphics.Interpolator.Result",
            "!url": "http://developer.android.com/reference/android/graphics/Interpolator.Result.html#NORMAL"
          },
          "valueOf": {
            "!type": "fn(name: string) -> +android.graphics.Interpolator.Result",
            "!url": "http://developer.android.com/reference/android/graphics/Interpolator.Result.html#valueOf(java.lang.String)"
          },
          "values": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/graphics/Interpolator.Result.html#values()"
          },
          "getSharedConstants": {
            "!type": "fn(enumType: +java.lang.Class) -> +java.newArray",
            "!url": "http://developer.android.com/reference/java/lang/Enum.html#getSharedConstants(java.lang.Class)"
          },
          "prototype": {
            "name": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#name()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#toString()"
            },
            "equals": {
              "!type": "fn(other: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#equals(java.lang.Object)"
            },
            "compareTo": {
              "!type": "fn(o: +java.lang.Enum) -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#compareTo(E)"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "getDeclaringClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#getDeclaringClass()"
            },
            "ordinal": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#ordinal()"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#hashCode()"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            }
          }
        },
        "prototype": {
          "setKeyFrame": {
            "!type": "fn(index: number, msec: number, values: +java.newArray) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Interpolator.html#setKeyFrame(int, int, float[])"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "getValueCount": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Interpolator.html#getValueCount()"
          },
          "setRepeatMirror": {
            "!type": "fn(repeatCount: +java.lang.Float, mirror: bool) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Interpolator.html#setRepeatMirror(float, boolean)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "reset": {
            "!type": "fn(valueCount: number) -> void",
            "!url": "http://developer.android.com/reference/android/graphics/Interpolator.html#reset(int)"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getKeyFrameCount": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/graphics/Interpolator.html#getKeyFrameCount()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "timeToValues": {
            "!type": "fn(values: +java.newArray) -> +android.graphics.Interpolator.Result",
            "!url": "http://developer.android.com/reference/android/graphics/Interpolator.html#timeToValues(float[])"
          }
        }
      },
      "GraphicsTests": {
        "!url": "http://developer.android.com/reference/android/graphics/GraphicsTests.html",
        "!type": "fn()",
        "suite": {
          "!type": "fn() -> TestSuite",
          "!url": "http://developer.android.com/reference/android/graphics/GraphicsTests.html#suite()"
        },
        "prototype": {
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          }
        }
      },
      "Rasterizer": {
        "!url": "http://developer.android.com/reference/android/graphics/Rasterizer.html",
        "!type": "fn()",
        "prototype": {
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          }
        }
      }
    }
  }
}